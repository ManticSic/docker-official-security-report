name: Generate Report

on:
  schedule:
    - cron: "0 12 * * 0"
  workflow_dispatch:

jobs:
  centos:
    runs-on: ubuntu-latest
    steps:
      - name: Fetch data about the repository
        run: curl -L -o centos.repository.json -s 'https://hub.docker.com/v2/repositories/library/centos'
      - name: Fetch data about the tag
        run: curl -L -o centos.tag.json -s 'https://hub.docker.com/v2/repositories/library/centos/tags/latest'
      - name: Pull image
        run: docker pull centos:latest
      - name: Create report
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'centos:latest'
          format: 'json'
          output: 'centos.report.json'
          scanners: 'vuln,secret,config'
      - name: Upload scan report
        uses: actions/upload-artifact@v4
        with:
          name: 'centos.report.json'
          path: 'centos.report.json'
          retention-days: 1
      - name: Upload repository data
        uses: actions/upload-artifact@v4
        with:
          name: 'centos.repository.json'
          path: 'centos.repository.json'
          retention-days: 1
      - name: Upload tag data
        uses: actions/upload-artifact@v4
        with:
          name: 'centos'
          path: 'centos'
          retention-days: 1

  busybox:
    runs-on: ubuntu-latest
    steps:
      - name: Fetch data about the repository
        run: curl -L -o busybox.repository.json -s 'https://hub.docker.com/v2/repositories/library/busybox'
      - name: Fetch data about the tag
        run: curl -L -o busybox.tag.json -s 'https://hub.docker.com/v2/repositories/library/busybox/tags/latest'
      - name: Pull image
        run: docker pull busybox:latest
      - name: Create report
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'busybox:latest'
          format: 'json'
          output: 'busybox.report.json'
          scanners: 'vuln,secret,config'
      - name: Upload scan report
        uses: actions/upload-artifact@v4
        with:
          name: 'busybox.report.json'
          path: 'busybox.report.json'
          retention-days: 1
      - name: Upload repository data
        uses: actions/upload-artifact@v4
        with:
          name: 'busybox.repository.json'
          path: 'busybox.repository.json'
          retention-days: 1
      - name: Upload tag data
        uses: actions/upload-artifact@v4
        with:
          name: 'busybox'
          path: 'busybox'
          retention-days: 1

  ubuntu:
    runs-on: ubuntu-latest
    steps:
      - name: Fetch data about the repository
        run: curl -L -o ubuntu.repository.json -s 'https://hub.docker.com/v2/repositories/library/ubuntu'
      - name: Fetch data about the tag
        run: curl -L -o ubuntu.tag.json -s 'https://hub.docker.com/v2/repositories/library/ubuntu/tags/latest'
      - name: Pull image
        run: docker pull ubuntu:latest
      - name: Create report
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'ubuntu:latest'
          format: 'json'
          output: 'ubuntu.report.json'
          scanners: 'vuln,secret,config'
      - name: Upload scan report
        uses: actions/upload-artifact@v4
        with:
          name: 'ubuntu.report.json'
          path: 'ubuntu.report.json'
          retention-days: 1
      - name: Upload repository data
        uses: actions/upload-artifact@v4
        with:
          name: 'ubuntu.repository.json'
          path: 'ubuntu.repository.json'
          retention-days: 1
      - name: Upload tag data
        uses: actions/upload-artifact@v4
        with:
          name: 'ubuntu'
          path: 'ubuntu'
          retention-days: 1

  fedora:
    runs-on: ubuntu-latest
    steps:
      - name: Fetch data about the repository
        run: curl -L -o fedora.repository.json -s 'https://hub.docker.com/v2/repositories/library/fedora'
      - name: Fetch data about the tag
        run: curl -L -o fedora.tag.json -s 'https://hub.docker.com/v2/repositories/library/fedora/tags/latest'
      - name: Pull image
        run: docker pull fedora:latest
      - name: Create report
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'fedora:latest'
          format: 'json'
          output: 'fedora.report.json'
          scanners: 'vuln,secret,config'
      - name: Upload scan report
        uses: actions/upload-artifact@v4
        with:
          name: 'fedora.report.json'
          path: 'fedora.report.json'
          retention-days: 1
      - name: Upload repository data
        uses: actions/upload-artifact@v4
        with:
          name: 'fedora.repository.json'
          path: 'fedora.repository.json'
          retention-days: 1
      - name: Upload tag data
        uses: actions/upload-artifact@v4
        with:
          name: 'fedora'
          path: 'fedora'
          retention-days: 1

  registry:
    runs-on: ubuntu-latest
    steps:
      - name: Fetch data about the repository
        run: curl -L -o registry.repository.json -s 'https://hub.docker.com/v2/repositories/library/registry'
      - name: Fetch data about the tag
        run: curl -L -o registry.tag.json -s 'https://hub.docker.com/v2/repositories/library/registry/tags/latest'
      - name: Pull image
        run: docker pull registry:latest
      - name: Create report
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'registry:latest'
          format: 'json'
          output: 'registry.report.json'
          scanners: 'vuln,secret,config'
      - name: Upload scan report
        uses: actions/upload-artifact@v4
        with:
          name: 'registry.report.json'
          path: 'registry.report.json'
          retention-days: 1
      - name: Upload repository data
        uses: actions/upload-artifact@v4
        with:
          name: 'registry.repository.json'
          path: 'registry.repository.json'
          retention-days: 1
      - name: Upload tag data
        uses: actions/upload-artifact@v4
        with:
          name: 'registry'
          path: 'registry'
          retention-days: 1

  hipache:
    runs-on: ubuntu-latest
    steps:
      - name: Fetch data about the repository
        run: curl -L -o hipache.repository.json -s 'https://hub.docker.com/v2/repositories/library/hipache'
      - name: Fetch data about the tag
        run: curl -L -o hipache.tag.json -s 'https://hub.docker.com/v2/repositories/library/hipache/tags/latest'
      - name: Pull image
        run: docker pull hipache:latest
      - name: Create report
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'hipache:latest'
          format: 'json'
          output: 'hipache.report.json'
          scanners: 'vuln,secret,config'
      - name: Upload scan report
        uses: actions/upload-artifact@v4
        with:
          name: 'hipache.report.json'
          path: 'hipache.report.json'
          retention-days: 1
      - name: Upload repository data
        uses: actions/upload-artifact@v4
        with:
          name: 'hipache.repository.json'
          path: 'hipache.repository.json'
          retention-days: 1
      - name: Upload tag data
        uses: actions/upload-artifact@v4
        with:
          name: 'hipache'
          path: 'hipache'
          retention-days: 1

  docker-dev:
    runs-on: ubuntu-latest
    steps:
      - name: Fetch data about the repository
        run: curl -L -o docker-dev.repository.json -s 'https://hub.docker.com/v2/repositories/library/docker-dev'
      - name: Fetch data about the tag
        run: curl -L -o docker-dev.tag.json -s 'https://hub.docker.com/v2/repositories/library/docker-dev/tags/1'
      - name: Pull image
        run: docker pull docker-dev:1
      - name: Create report
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'docker-dev:1'
          format: 'json'
          output: 'docker-dev.report.json'
          scanners: 'vuln,secret,config'
      - name: Upload scan report
        uses: actions/upload-artifact@v4
        with:
          name: 'docker-dev.report.json'
          path: 'docker-dev.report.json'
          retention-days: 1
      - name: Upload repository data
        uses: actions/upload-artifact@v4
        with:
          name: 'docker-dev.repository.json'
          path: 'docker-dev.repository.json'
          retention-days: 1
      - name: Upload tag data
        uses: actions/upload-artifact@v4
        with:
          name: 'docker-dev'
          path: 'docker-dev'
          retention-days: 1

  debian:
    runs-on: ubuntu-latest
    steps:
      - name: Fetch data about the repository
        run: curl -L -o debian.repository.json -s 'https://hub.docker.com/v2/repositories/library/debian'
      - name: Fetch data about the tag
        run: curl -L -o debian.tag.json -s 'https://hub.docker.com/v2/repositories/library/debian/tags/latest'
      - name: Pull image
        run: docker pull debian:latest
      - name: Create report
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'debian:latest'
          format: 'json'
          output: 'debian.report.json'
          scanners: 'vuln,secret,config'
      - name: Upload scan report
        uses: actions/upload-artifact@v4
        with:
          name: 'debian.report.json'
          path: 'debian.report.json'
          retention-days: 1
      - name: Upload repository data
        uses: actions/upload-artifact@v4
        with:
          name: 'debian.repository.json'
          path: 'debian.repository.json'
          retention-days: 1
      - name: Upload tag data
        uses: actions/upload-artifact@v4
        with:
          name: 'debian'
          path: 'debian'
          retention-days: 1

  cirros:
    runs-on: ubuntu-latest
    steps:
      - name: Fetch data about the repository
        run: curl -L -o cirros.repository.json -s 'https://hub.docker.com/v2/repositories/library/cirros'
      - name: Fetch data about the tag
        run: curl -L -o cirros.tag.json -s 'https://hub.docker.com/v2/repositories/library/cirros/tags/latest'
      - name: Pull image
        run: docker pull cirros:latest
      - name: Create report
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'cirros:latest'
          format: 'json'
          output: 'cirros.report.json'
          scanners: 'vuln,secret,config'
      - name: Upload scan report
        uses: actions/upload-artifact@v4
        with:
          name: 'cirros.report.json'
          path: 'cirros.report.json'
          retention-days: 1
      - name: Upload repository data
        uses: actions/upload-artifact@v4
        with:
          name: 'cirros.repository.json'
          path: 'cirros.repository.json'
          retention-days: 1
      - name: Upload tag data
        uses: actions/upload-artifact@v4
        with:
          name: 'cirros'
          path: 'cirros'
          retention-days: 1

  crux:
    runs-on: ubuntu-latest
    steps:
      - name: Fetch data about the repository
        run: curl -L -o crux.repository.json -s 'https://hub.docker.com/v2/repositories/library/crux'
      - name: Fetch data about the tag
        run: curl -L -o crux.tag.json -s 'https://hub.docker.com/v2/repositories/library/crux/tags/latest'
      - name: Pull image
        run: docker pull crux:latest
      - name: Create report
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'crux:latest'
          format: 'json'
          output: 'crux.report.json'
          scanners: 'vuln,secret,config'
      - name: Upload scan report
        uses: actions/upload-artifact@v4
        with:
          name: 'crux.report.json'
          path: 'crux.report.json'
          retention-days: 1
      - name: Upload repository data
        uses: actions/upload-artifact@v4
        with:
          name: 'crux.repository.json'
          path: 'crux.repository.json'
          retention-days: 1
      - name: Upload tag data
        uses: actions/upload-artifact@v4
        with:
          name: 'crux'
          path: 'crux'
          retention-days: 1

  ubuntu-upstart:
    runs-on: ubuntu-latest
    steps:
      - name: Fetch data about the repository
        run: curl -L -o ubuntu-upstart.repository.json -s 'https://hub.docker.com/v2/repositories/library/ubuntu-upstart'
      - name: Fetch data about the tag
        run: curl -L -o ubuntu-upstart.tag.json -s 'https://hub.docker.com/v2/repositories/library/ubuntu-upstart/tags/latest'
      - name: Pull image
        run: docker pull ubuntu-upstart:latest
      - name: Create report
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'ubuntu-upstart:latest'
          format: 'json'
          output: 'ubuntu-upstart.report.json'
          scanners: 'vuln,secret,config'
      - name: Upload scan report
        uses: actions/upload-artifact@v4
        with:
          name: 'ubuntu-upstart.report.json'
          path: 'ubuntu-upstart.report.json'
          retention-days: 1
      - name: Upload repository data
        uses: actions/upload-artifact@v4
        with:
          name: 'ubuntu-upstart.repository.json'
          path: 'ubuntu-upstart.repository.json'
          retention-days: 1
      - name: Upload tag data
        uses: actions/upload-artifact@v4
        with:
          name: 'ubuntu-upstart'
          path: 'ubuntu-upstart'
          retention-days: 1

  buildpack-deps:
    runs-on: ubuntu-latest
    steps:
      - name: Fetch data about the repository
        run: curl -L -o buildpack-deps.repository.json -s 'https://hub.docker.com/v2/repositories/library/buildpack-deps'
      - name: Fetch data about the tag
        run: curl -L -o buildpack-deps.tag.json -s 'https://hub.docker.com/v2/repositories/library/buildpack-deps/tags/latest'
      - name: Pull image
        run: docker pull buildpack-deps:latest
      - name: Create report
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'buildpack-deps:latest'
          format: 'json'
          output: 'buildpack-deps.report.json'
          scanners: 'vuln,secret,config'
      - name: Upload scan report
        uses: actions/upload-artifact@v4
        with:
          name: 'buildpack-deps.report.json'
          path: 'buildpack-deps.report.json'
          retention-days: 1
      - name: Upload repository data
        uses: actions/upload-artifact@v4
        with:
          name: 'buildpack-deps.repository.json'
          path: 'buildpack-deps.repository.json'
          retention-days: 1
      - name: Upload tag data
        uses: actions/upload-artifact@v4
        with:
          name: 'buildpack-deps'
          path: 'buildpack-deps'
          retention-days: 1

  nginx:
    runs-on: ubuntu-latest
    steps:
      - name: Fetch data about the repository
        run: curl -L -o nginx.repository.json -s 'https://hub.docker.com/v2/repositories/library/nginx'
      - name: Fetch data about the tag
        run: curl -L -o nginx.tag.json -s 'https://hub.docker.com/v2/repositories/library/nginx/tags/latest'
      - name: Pull image
        run: docker pull nginx:latest
      - name: Create report
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'nginx:latest'
          format: 'json'
          output: 'nginx.report.json'
          scanners: 'vuln,secret,config'
      - name: Upload scan report
        uses: actions/upload-artifact@v4
        with:
          name: 'nginx.report.json'
          path: 'nginx.report.json'
          retention-days: 1
      - name: Upload repository data
        uses: actions/upload-artifact@v4
        with:
          name: 'nginx.repository.json'
          path: 'nginx.repository.json'
          retention-days: 1
      - name: Upload tag data
        uses: actions/upload-artifact@v4
        with:
          name: 'nginx'
          path: 'nginx'
          retention-days: 1

  node:
    runs-on: ubuntu-latest
    steps:
      - name: Fetch data about the repository
        run: curl -L -o node.repository.json -s 'https://hub.docker.com/v2/repositories/library/node'
      - name: Fetch data about the tag
        run: curl -L -o node.tag.json -s 'https://hub.docker.com/v2/repositories/library/node/tags/latest'
      - name: Pull image
        run: docker pull node:latest
      - name: Create report
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'node:latest'
          format: 'json'
          output: 'node.report.json'
          scanners: 'vuln,secret,config'
      - name: Upload scan report
        uses: actions/upload-artifact@v4
        with:
          name: 'node.report.json'
          path: 'node.report.json'
          retention-days: 1
      - name: Upload repository data
        uses: actions/upload-artifact@v4
        with:
          name: 'node.repository.json'
          path: 'node.repository.json'
          retention-days: 1
      - name: Upload tag data
        uses: actions/upload-artifact@v4
        with:
          name: 'node'
          path: 'node'
          retention-days: 1

  mysql:
    runs-on: ubuntu-latest
    steps:
      - name: Fetch data about the repository
        run: curl -L -o mysql.repository.json -s 'https://hub.docker.com/v2/repositories/library/mysql'
      - name: Fetch data about the tag
        run: curl -L -o mysql.tag.json -s 'https://hub.docker.com/v2/repositories/library/mysql/tags/latest'
      - name: Pull image
        run: docker pull mysql:latest
      - name: Create report
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'mysql:latest'
          format: 'json'
          output: 'mysql.report.json'
          scanners: 'vuln,secret,config'
      - name: Upload scan report
        uses: actions/upload-artifact@v4
        with:
          name: 'mysql.report.json'
          path: 'mysql.report.json'
          retention-days: 1
      - name: Upload repository data
        uses: actions/upload-artifact@v4
        with:
          name: 'mysql.repository.json'
          path: 'mysql.repository.json'
          retention-days: 1
      - name: Upload tag data
        uses: actions/upload-artifact@v4
        with:
          name: 'mysql'
          path: 'mysql'
          retention-days: 1

  wordpress:
    runs-on: ubuntu-latest
    steps:
      - name: Fetch data about the repository
        run: curl -L -o wordpress.repository.json -s 'https://hub.docker.com/v2/repositories/library/wordpress'
      - name: Fetch data about the tag
        run: curl -L -o wordpress.tag.json -s 'https://hub.docker.com/v2/repositories/library/wordpress/tags/latest'
      - name: Pull image
        run: docker pull wordpress:latest
      - name: Create report
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'wordpress:latest'
          format: 'json'
          output: 'wordpress.report.json'
          scanners: 'vuln,secret,config'
      - name: Upload scan report
        uses: actions/upload-artifact@v4
        with:
          name: 'wordpress.report.json'
          path: 'wordpress.report.json'
          retention-days: 1
      - name: Upload repository data
        uses: actions/upload-artifact@v4
        with:
          name: 'wordpress.repository.json'
          path: 'wordpress.repository.json'
          retention-days: 1
      - name: Upload tag data
        uses: actions/upload-artifact@v4
        with:
          name: 'wordpress'
          path: 'wordpress'
          retention-days: 1

  postgres:
    runs-on: ubuntu-latest
    steps:
      - name: Fetch data about the repository
        run: curl -L -o postgres.repository.json -s 'https://hub.docker.com/v2/repositories/library/postgres'
      - name: Fetch data about the tag
        run: curl -L -o postgres.tag.json -s 'https://hub.docker.com/v2/repositories/library/postgres/tags/latest'
      - name: Pull image
        run: docker pull postgres:latest
      - name: Create report
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'postgres:latest'
          format: 'json'
          output: 'postgres.report.json'
          scanners: 'vuln,secret,config'
      - name: Upload scan report
        uses: actions/upload-artifact@v4
        with:
          name: 'postgres.report.json'
          path: 'postgres.report.json'
          retention-days: 1
      - name: Upload repository data
        uses: actions/upload-artifact@v4
        with:
          name: 'postgres.repository.json'
          path: 'postgres.repository.json'
          retention-days: 1
      - name: Upload tag data
        uses: actions/upload-artifact@v4
        with:
          name: 'postgres'
          path: 'postgres'
          retention-days: 1

  redis:
    runs-on: ubuntu-latest
    steps:
      - name: Fetch data about the repository
        run: curl -L -o redis.repository.json -s 'https://hub.docker.com/v2/repositories/library/redis'
      - name: Fetch data about the tag
        run: curl -L -o redis.tag.json -s 'https://hub.docker.com/v2/repositories/library/redis/tags/latest'
      - name: Pull image
        run: docker pull redis:latest
      - name: Create report
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'redis:latest'
          format: 'json'
          output: 'redis.report.json'
          scanners: 'vuln,secret,config'
      - name: Upload scan report
        uses: actions/upload-artifact@v4
        with:
          name: 'redis.report.json'
          path: 'redis.report.json'
          retention-days: 1
      - name: Upload repository data
        uses: actions/upload-artifact@v4
        with:
          name: 'redis.repository.json'
          path: 'redis.repository.json'
          retention-days: 1
      - name: Upload tag data
        uses: actions/upload-artifact@v4
        with:
          name: 'redis'
          path: 'redis'
          retention-days: 1

  mongo:
    runs-on: ubuntu-latest
    steps:
      - name: Fetch data about the repository
        run: curl -L -o mongo.repository.json -s 'https://hub.docker.com/v2/repositories/library/mongo'
      - name: Fetch data about the tag
        run: curl -L -o mongo.tag.json -s 'https://hub.docker.com/v2/repositories/library/mongo/tags/latest'
      - name: Pull image
        run: docker pull mongo:latest
      - name: Create report
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'mongo:latest'
          format: 'json'
          output: 'mongo.report.json'
          scanners: 'vuln,secret,config'
      - name: Upload scan report
        uses: actions/upload-artifact@v4
        with:
          name: 'mongo.report.json'
          path: 'mongo.report.json'
          retention-days: 1
      - name: Upload repository data
        uses: actions/upload-artifact@v4
        with:
          name: 'mongo.repository.json'
          path: 'mongo.repository.json'
          retention-days: 1
      - name: Upload tag data
        uses: actions/upload-artifact@v4
        with:
          name: 'mongo'
          path: 'mongo'
          retention-days: 1

  rails:
    runs-on: ubuntu-latest
    steps:
      - name: Fetch data about the repository
        run: curl -L -o rails.repository.json -s 'https://hub.docker.com/v2/repositories/library/rails'
      - name: Fetch data about the tag
        run: curl -L -o rails.tag.json -s 'https://hub.docker.com/v2/repositories/library/rails/tags/latest'
      - name: Pull image
        run: docker pull rails:latest
      - name: Create report
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'rails:latest'
          format: 'json'
          output: 'rails.report.json'
          scanners: 'vuln,secret,config'
      - name: Upload scan report
        uses: actions/upload-artifact@v4
        with:
          name: 'rails.report.json'
          path: 'rails.report.json'
          retention-days: 1
      - name: Upload repository data
        uses: actions/upload-artifact@v4
        with:
          name: 'rails.repository.json'
          path: 'rails.repository.json'
          retention-days: 1
      - name: Upload tag data
        uses: actions/upload-artifact@v4
        with:
          name: 'rails'
          path: 'rails'
          retention-days: 1

  ruby:
    runs-on: ubuntu-latest
    steps:
      - name: Fetch data about the repository
        run: curl -L -o ruby.repository.json -s 'https://hub.docker.com/v2/repositories/library/ruby'
      - name: Fetch data about the tag
        run: curl -L -o ruby.tag.json -s 'https://hub.docker.com/v2/repositories/library/ruby/tags/latest'
      - name: Pull image
        run: docker pull ruby:latest
      - name: Create report
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'ruby:latest'
          format: 'json'
          output: 'ruby.report.json'
          scanners: 'vuln,secret,config'
      - name: Upload scan report
        uses: actions/upload-artifact@v4
        with:
          name: 'ruby.report.json'
          path: 'ruby.report.json'
          retention-days: 1
      - name: Upload repository data
        uses: actions/upload-artifact@v4
        with:
          name: 'ruby.repository.json'
          path: 'ruby.repository.json'
          retention-days: 1
      - name: Upload tag data
        uses: actions/upload-artifact@v4
        with:
          name: 'ruby'
          path: 'ruby'
          retention-days: 1

  python:
    runs-on: ubuntu-latest
    steps:
      - name: Fetch data about the repository
        run: curl -L -o python.repository.json -s 'https://hub.docker.com/v2/repositories/library/python'
      - name: Fetch data about the tag
        run: curl -L -o python.tag.json -s 'https://hub.docker.com/v2/repositories/library/python/tags/latest'
      - name: Pull image
        run: docker pull python:latest
      - name: Create report
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'python:latest'
          format: 'json'
          output: 'python.report.json'
          scanners: 'vuln,secret,config'
      - name: Upload scan report
        uses: actions/upload-artifact@v4
        with:
          name: 'python.report.json'
          path: 'python.report.json'
          retention-days: 1
      - name: Upload repository data
        uses: actions/upload-artifact@v4
        with:
          name: 'python.repository.json'
          path: 'python.repository.json'
          retention-days: 1
      - name: Upload tag data
        uses: actions/upload-artifact@v4
        with:
          name: 'python'
          path: 'python'
          retention-days: 1

  ubuntu-debootstrap:
    runs-on: ubuntu-latest
    steps:
      - name: Fetch data about the repository
        run: curl -L -o ubuntu-debootstrap.repository.json -s 'https://hub.docker.com/v2/repositories/library/ubuntu-debootstrap'
      - name: Fetch data about the tag
        run: curl -L -o ubuntu-debootstrap.tag.json -s 'https://hub.docker.com/v2/repositories/library/ubuntu-debootstrap/tags/latest'
      - name: Pull image
        run: docker pull ubuntu-debootstrap:latest
      - name: Create report
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'ubuntu-debootstrap:latest'
          format: 'json'
          output: 'ubuntu-debootstrap.report.json'
          scanners: 'vuln,secret,config'
      - name: Upload scan report
        uses: actions/upload-artifact@v4
        with:
          name: 'ubuntu-debootstrap.report.json'
          path: 'ubuntu-debootstrap.report.json'
          retention-days: 1
      - name: Upload repository data
        uses: actions/upload-artifact@v4
        with:
          name: 'ubuntu-debootstrap.repository.json'
          path: 'ubuntu-debootstrap.repository.json'
          retention-days: 1
      - name: Upload tag data
        uses: actions/upload-artifact@v4
        with:
          name: 'ubuntu-debootstrap'
          path: 'ubuntu-debootstrap'
          retention-days: 1

  perl:
    runs-on: ubuntu-latest
    steps:
      - name: Fetch data about the repository
        run: curl -L -o perl.repository.json -s 'https://hub.docker.com/v2/repositories/library/perl'
      - name: Fetch data about the tag
        run: curl -L -o perl.tag.json -s 'https://hub.docker.com/v2/repositories/library/perl/tags/latest'
      - name: Pull image
        run: docker pull perl:latest
      - name: Create report
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'perl:latest'
          format: 'json'
          output: 'perl.report.json'
          scanners: 'vuln,secret,config'
      - name: Upload scan report
        uses: actions/upload-artifact@v4
        with:
          name: 'perl.report.json'
          path: 'perl.report.json'
          retention-days: 1
      - name: Upload repository data
        uses: actions/upload-artifact@v4
        with:
          name: 'perl.repository.json'
          path: 'perl.repository.json'
          retention-days: 1
      - name: Upload tag data
        uses: actions/upload-artifact@v4
        with:
          name: 'perl'
          path: 'perl'
          retention-days: 1

  hello-world:
    runs-on: ubuntu-latest
    steps:
      - name: Fetch data about the repository
        run: curl -L -o hello-world.repository.json -s 'https://hub.docker.com/v2/repositories/library/hello-world'
      - name: Fetch data about the tag
        run: curl -L -o hello-world.tag.json -s 'https://hub.docker.com/v2/repositories/library/hello-world/tags/latest'
      - name: Pull image
        run: docker pull hello-world:latest
      - name: Create report
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'hello-world:latest'
          format: 'json'
          output: 'hello-world.report.json'
          scanners: 'vuln,secret,config'
      - name: Upload scan report
        uses: actions/upload-artifact@v4
        with:
          name: 'hello-world.report.json'
          path: 'hello-world.report.json'
          retention-days: 1
      - name: Upload repository data
        uses: actions/upload-artifact@v4
        with:
          name: 'hello-world.repository.json'
          path: 'hello-world.repository.json'
          retention-days: 1
      - name: Upload tag data
        uses: actions/upload-artifact@v4
        with:
          name: 'hello-world'
          path: 'hello-world'
          retention-days: 1

  hylang:
    runs-on: ubuntu-latest
    steps:
      - name: Fetch data about the repository
        run: curl -L -o hylang.repository.json -s 'https://hub.docker.com/v2/repositories/library/hylang'
      - name: Fetch data about the tag
        run: curl -L -o hylang.tag.json -s 'https://hub.docker.com/v2/repositories/library/hylang/tags/latest'
      - name: Pull image
        run: docker pull hylang:latest
      - name: Create report
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'hylang:latest'
          format: 'json'
          output: 'hylang.report.json'
          scanners: 'vuln,secret,config'
      - name: Upload scan report
        uses: actions/upload-artifact@v4
        with:
          name: 'hylang.report.json'
          path: 'hylang.report.json'
          retention-days: 1
      - name: Upload repository data
        uses: actions/upload-artifact@v4
        with:
          name: 'hylang.repository.json'
          path: 'hylang.repository.json'
          retention-days: 1
      - name: Upload tag data
        uses: actions/upload-artifact@v4
        with:
          name: 'hylang'
          path: 'hylang'
          retention-days: 1

  gcc:
    runs-on: ubuntu-latest
    steps:
      - name: Fetch data about the repository
        run: curl -L -o gcc.repository.json -s 'https://hub.docker.com/v2/repositories/library/gcc'
      - name: Fetch data about the tag
        run: curl -L -o gcc.tag.json -s 'https://hub.docker.com/v2/repositories/library/gcc/tags/latest'
      - name: Pull image
        run: docker pull gcc:latest
      - name: Create report
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'gcc:latest'
          format: 'json'
          output: 'gcc.report.json'
          scanners: 'vuln,secret,config'
      - name: Upload scan report
        uses: actions/upload-artifact@v4
        with:
          name: 'gcc.report.json'
          path: 'gcc.report.json'
          retention-days: 1
      - name: Upload repository data
        uses: actions/upload-artifact@v4
        with:
          name: 'gcc.repository.json'
          path: 'gcc.repository.json'
          retention-days: 1
      - name: Upload tag data
        uses: actions/upload-artifact@v4
        with:
          name: 'gcc'
          path: 'gcc'
          retention-days: 1

  jenkins:
    runs-on: ubuntu-latest
    steps:
      - name: Fetch data about the repository
        run: curl -L -o jenkins.repository.json -s 'https://hub.docker.com/v2/repositories/library/jenkins'
      - name: Fetch data about the tag
        run: curl -L -o jenkins.tag.json -s 'https://hub.docker.com/v2/repositories/library/jenkins/tags/2.60.3'
      - name: Pull image
        run: docker pull jenkins:2.60.3
      - name: Create report
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'jenkins:2.60.3'
          format: 'json'
          output: 'jenkins.report.json'
          scanners: 'vuln,secret,config'
      - name: Upload scan report
        uses: actions/upload-artifact@v4
        with:
          name: 'jenkins.report.json'
          path: 'jenkins.report.json'
          retention-days: 1
      - name: Upload repository data
        uses: actions/upload-artifact@v4
        with:
          name: 'jenkins.repository.json'
          path: 'jenkins.repository.json'
          retention-days: 1
      - name: Upload tag data
        uses: actions/upload-artifact@v4
        with:
          name: 'jenkins'
          path: 'jenkins'
          retention-days: 1

  golang:
    runs-on: ubuntu-latest
    steps:
      - name: Fetch data about the repository
        run: curl -L -o golang.repository.json -s 'https://hub.docker.com/v2/repositories/library/golang'
      - name: Fetch data about the tag
        run: curl -L -o golang.tag.json -s 'https://hub.docker.com/v2/repositories/library/golang/tags/latest'
      - name: Pull image
        run: docker pull golang:latest
      - name: Create report
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'golang:latest'
          format: 'json'
          output: 'golang.report.json'
          scanners: 'vuln,secret,config'
      - name: Upload scan report
        uses: actions/upload-artifact@v4
        with:
          name: 'golang.report.json'
          path: 'golang.report.json'
          retention-days: 1
      - name: Upload repository data
        uses: actions/upload-artifact@v4
        with:
          name: 'golang.repository.json'
          path: 'golang.repository.json'
          retention-days: 1
      - name: Upload tag data
        uses: actions/upload-artifact@v4
        with:
          name: 'golang'
          path: 'golang'
          retention-days: 1

  neurodebian:
    runs-on: ubuntu-latest
    steps:
      - name: Fetch data about the repository
        run: curl -L -o neurodebian.repository.json -s 'https://hub.docker.com/v2/repositories/library/neurodebian'
      - name: Fetch data about the tag
        run: curl -L -o neurodebian.tag.json -s 'https://hub.docker.com/v2/repositories/library/neurodebian/tags/latest'
      - name: Pull image
        run: docker pull neurodebian:latest
      - name: Create report
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'neurodebian:latest'
          format: 'json'
          output: 'neurodebian.report.json'
          scanners: 'vuln,secret,config'
      - name: Upload scan report
        uses: actions/upload-artifact@v4
        with:
          name: 'neurodebian.report.json'
          path: 'neurodebian.report.json'
          retention-days: 1
      - name: Upload repository data
        uses: actions/upload-artifact@v4
        with:
          name: 'neurodebian.repository.json'
          path: 'neurodebian.repository.json'
          retention-days: 1
      - name: Upload tag data
        uses: actions/upload-artifact@v4
        with:
          name: 'neurodebian'
          path: 'neurodebian'
          retention-days: 1

  clojure:
    runs-on: ubuntu-latest
    steps:
      - name: Fetch data about the repository
        run: curl -L -o clojure.repository.json -s 'https://hub.docker.com/v2/repositories/library/clojure'
      - name: Fetch data about the tag
        run: curl -L -o clojure.tag.json -s 'https://hub.docker.com/v2/repositories/library/clojure/tags/latest'
      - name: Pull image
        run: docker pull clojure:latest
      - name: Create report
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'clojure:latest'
          format: 'json'
          output: 'clojure.report.json'
          scanners: 'vuln,secret,config'
      - name: Upload scan report
        uses: actions/upload-artifact@v4
        with:
          name: 'clojure.report.json'
          path: 'clojure.report.json'
          retention-days: 1
      - name: Upload repository data
        uses: actions/upload-artifact@v4
        with:
          name: 'clojure.repository.json'
          path: 'clojure.repository.json'
          retention-days: 1
      - name: Upload tag data
        uses: actions/upload-artifact@v4
        with:
          name: 'clojure'
          path: 'clojure'
          retention-days: 1

  php:
    runs-on: ubuntu-latest
    steps:
      - name: Fetch data about the repository
        run: curl -L -o php.repository.json -s 'https://hub.docker.com/v2/repositories/library/php'
      - name: Fetch data about the tag
        run: curl -L -o php.tag.json -s 'https://hub.docker.com/v2/repositories/library/php/tags/latest'
      - name: Pull image
        run: docker pull php:latest
      - name: Create report
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'php:latest'
          format: 'json'
          output: 'php.report.json'
          scanners: 'vuln,secret,config'
      - name: Upload scan report
        uses: actions/upload-artifact@v4
        with:
          name: 'php.report.json'
          path: 'php.report.json'
          retention-days: 1
      - name: Upload repository data
        uses: actions/upload-artifact@v4
        with:
          name: 'php.repository.json'
          path: 'php.repository.json'
          retention-days: 1
      - name: Upload tag data
        uses: actions/upload-artifact@v4
        with:
          name: 'php'
          path: 'php'
          retention-days: 1

  jruby:
    runs-on: ubuntu-latest
    steps:
      - name: Fetch data about the repository
        run: curl -L -o jruby.repository.json -s 'https://hub.docker.com/v2/repositories/library/jruby'
      - name: Fetch data about the tag
        run: curl -L -o jruby.tag.json -s 'https://hub.docker.com/v2/repositories/library/jruby/tags/latest'
      - name: Pull image
        run: docker pull jruby:latest
      - name: Create report
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'jruby:latest'
          format: 'json'
          output: 'jruby.report.json'
          scanners: 'vuln,secret,config'
      - name: Upload scan report
        uses: actions/upload-artifact@v4
        with:
          name: 'jruby.report.json'
          path: 'jruby.report.json'
          retention-days: 1
      - name: Upload repository data
        uses: actions/upload-artifact@v4
        with:
          name: 'jruby.repository.json'
          path: 'jruby.repository.json'
          retention-days: 1
      - name: Upload tag data
        uses: actions/upload-artifact@v4
        with:
          name: 'jruby'
          path: 'jruby'
          retention-days: 1

  mageia:
    runs-on: ubuntu-latest
    steps:
      - name: Fetch data about the repository
        run: curl -L -o mageia.repository.json -s 'https://hub.docker.com/v2/repositories/library/mageia'
      - name: Fetch data about the tag
        run: curl -L -o mageia.tag.json -s 'https://hub.docker.com/v2/repositories/library/mageia/tags/latest'
      - name: Pull image
        run: docker pull mageia:latest
      - name: Create report
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'mageia:latest'
          format: 'json'
          output: 'mageia.report.json'
          scanners: 'vuln,secret,config'
      - name: Upload scan report
        uses: actions/upload-artifact@v4
        with:
          name: 'mageia.report.json'
          path: 'mageia.report.json'
          retention-days: 1
      - name: Upload repository data
        uses: actions/upload-artifact@v4
        with:
          name: 'mageia.repository.json'
          path: 'mageia.repository.json'
          retention-days: 1
      - name: Upload tag data
        uses: actions/upload-artifact@v4
        with:
          name: 'mageia'
          path: 'mageia'
          retention-days: 1

  crate:
    runs-on: ubuntu-latest
    steps:
      - name: Fetch data about the repository
        run: curl -L -o crate.repository.json -s 'https://hub.docker.com/v2/repositories/library/crate'
      - name: Fetch data about the tag
        run: curl -L -o crate.tag.json -s 'https://hub.docker.com/v2/repositories/library/crate/tags/latest'
      - name: Pull image
        run: docker pull crate:latest
      - name: Create report
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'crate:latest'
          format: 'json'
          output: 'crate.report.json'
          scanners: 'vuln,secret,config'
      - name: Upload scan report
        uses: actions/upload-artifact@v4
        with:
          name: 'crate.report.json'
          path: 'crate.report.json'
          retention-days: 1
      - name: Upload repository data
        uses: actions/upload-artifact@v4
        with:
          name: 'crate.repository.json'
          path: 'crate.repository.json'
          retention-days: 1
      - name: Upload tag data
        uses: actions/upload-artifact@v4
        with:
          name: 'crate'
          path: 'crate'
          retention-days: 1

  php-zendserver:
    runs-on: ubuntu-latest
    steps:
      - name: Fetch data about the repository
        run: curl -L -o php-zendserver.repository.json -s 'https://hub.docker.com/v2/repositories/library/php-zendserver'
      - name: Fetch data about the tag
        run: curl -L -o php-zendserver.tag.json -s 'https://hub.docker.com/v2/repositories/library/php-zendserver/tags/latest'
      - name: Pull image
        run: docker pull php-zendserver:latest
      - name: Create report
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'php-zendserver:latest'
          format: 'json'
          output: 'php-zendserver.report.json'
          scanners: 'vuln,secret,config'
      - name: Upload scan report
        uses: actions/upload-artifact@v4
        with:
          name: 'php-zendserver.report.json'
          path: 'php-zendserver.report.json'
          retention-days: 1
      - name: Upload repository data
        uses: actions/upload-artifact@v4
        with:
          name: 'php-zendserver.repository.json'
          path: 'php-zendserver.repository.json'
          retention-days: 1
      - name: Upload tag data
        uses: actions/upload-artifact@v4
        with:
          name: 'php-zendserver'
          path: 'php-zendserver'
          retention-days: 1

  tomcat:
    runs-on: ubuntu-latest
    steps:
      - name: Fetch data about the repository
        run: curl -L -o tomcat.repository.json -s 'https://hub.docker.com/v2/repositories/library/tomcat'
      - name: Fetch data about the tag
        run: curl -L -o tomcat.tag.json -s 'https://hub.docker.com/v2/repositories/library/tomcat/tags/latest'
      - name: Pull image
        run: docker pull tomcat:latest
      - name: Create report
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'tomcat:latest'
          format: 'json'
          output: 'tomcat.report.json'
          scanners: 'vuln,secret,config'
      - name: Upload scan report
        uses: actions/upload-artifact@v4
        with:
          name: 'tomcat.report.json'
          path: 'tomcat.report.json'
          retention-days: 1
      - name: Upload repository data
        uses: actions/upload-artifact@v4
        with:
          name: 'tomcat.repository.json'
          path: 'tomcat.repository.json'
          retention-days: 1
      - name: Upload tag data
        uses: actions/upload-artifact@v4
        with:
          name: 'tomcat'
          path: 'tomcat'
          retention-days: 1

  mono:
    runs-on: ubuntu-latest
    steps:
      - name: Fetch data about the repository
        run: curl -L -o mono.repository.json -s 'https://hub.docker.com/v2/repositories/library/mono'
      - name: Fetch data about the tag
        run: curl -L -o mono.tag.json -s 'https://hub.docker.com/v2/repositories/library/mono/tags/latest'
      - name: Pull image
        run: docker pull mono:latest
      - name: Create report
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'mono:latest'
          format: 'json'
          output: 'mono.report.json'
          scanners: 'vuln,secret,config'
      - name: Upload scan report
        uses: actions/upload-artifact@v4
        with:
          name: 'mono.report.json'
          path: 'mono.report.json'
          retention-days: 1
      - name: Upload repository data
        uses: actions/upload-artifact@v4
        with:
          name: 'mono.repository.json'
          path: 'mono.repository.json'
          retention-days: 1
      - name: Upload tag data
        uses: actions/upload-artifact@v4
        with:
          name: 'mono'
          path: 'mono'
          retention-days: 1

  haskell:
    runs-on: ubuntu-latest
    steps:
      - name: Fetch data about the repository
        run: curl -L -o haskell.repository.json -s 'https://hub.docker.com/v2/repositories/library/haskell'
      - name: Fetch data about the tag
        run: curl -L -o haskell.tag.json -s 'https://hub.docker.com/v2/repositories/library/haskell/tags/latest'
      - name: Pull image
        run: docker pull haskell:latest
      - name: Create report
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'haskell:latest'
          format: 'json'
          output: 'haskell.report.json'
          scanners: 'vuln,secret,config'
      - name: Upload scan report
        uses: actions/upload-artifact@v4
        with:
          name: 'haskell.report.json'
          path: 'haskell.report.json'
          retention-days: 1
      - name: Upload repository data
        uses: actions/upload-artifact@v4
        with:
          name: 'haskell.repository.json'
          path: 'haskell.repository.json'
          retention-days: 1
      - name: Upload tag data
        uses: actions/upload-artifact@v4
        with:
          name: 'haskell'
          path: 'haskell'
          retention-days: 1

  glassfish:
    runs-on: ubuntu-latest
    steps:
      - name: Fetch data about the repository
        run: curl -L -o glassfish.repository.json -s 'https://hub.docker.com/v2/repositories/library/glassfish'
      - name: Fetch data about the tag
        run: curl -L -o glassfish.tag.json -s 'https://hub.docker.com/v2/repositories/library/glassfish/tags/latest'
      - name: Pull image
        run: docker pull glassfish:latest
      - name: Create report
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'glassfish:latest'
          format: 'json'
          output: 'glassfish.report.json'
          scanners: 'vuln,secret,config'
      - name: Upload scan report
        uses: actions/upload-artifact@v4
        with:
          name: 'glassfish.report.json'
          path: 'glassfish.report.json'
          retention-days: 1
      - name: Upload repository data
        uses: actions/upload-artifact@v4
        with:
          name: 'glassfish.repository.json'
          path: 'glassfish.repository.json'
          retention-days: 1
      - name: Upload tag data
        uses: actions/upload-artifact@v4
        with:
          name: 'glassfish'
          path: 'glassfish'
          retention-days: 1

  maven:
    runs-on: ubuntu-latest
    steps:
      - name: Fetch data about the repository
        run: curl -L -o maven.repository.json -s 'https://hub.docker.com/v2/repositories/library/maven'
      - name: Fetch data about the tag
        run: curl -L -o maven.tag.json -s 'https://hub.docker.com/v2/repositories/library/maven/tags/latest'
      - name: Pull image
        run: docker pull maven:latest
      - name: Create report
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'maven:latest'
          format: 'json'
          output: 'maven.report.json'
          scanners: 'vuln,secret,config'
      - name: Upload scan report
        uses: actions/upload-artifact@v4
        with:
          name: 'maven.report.json'
          path: 'maven.report.json'
          retention-days: 1
      - name: Upload repository data
        uses: actions/upload-artifact@v4
        with:
          name: 'maven.repository.json'
          path: 'maven.repository.json'
          retention-days: 1
      - name: Upload tag data
        uses: actions/upload-artifact@v4
        with:
          name: 'maven'
          path: 'maven'
          retention-days: 1

  httpd:
    runs-on: ubuntu-latest
    steps:
      - name: Fetch data about the repository
        run: curl -L -o httpd.repository.json -s 'https://hub.docker.com/v2/repositories/library/httpd'
      - name: Fetch data about the tag
        run: curl -L -o httpd.tag.json -s 'https://hub.docker.com/v2/repositories/library/httpd/tags/latest'
      - name: Pull image
        run: docker pull httpd:latest
      - name: Create report
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'httpd:latest'
          format: 'json'
          output: 'httpd.report.json'
          scanners: 'vuln,secret,config'
      - name: Upload scan report
        uses: actions/upload-artifact@v4
        with:
          name: 'httpd.report.json'
          path: 'httpd.report.json'
          retention-days: 1
      - name: Upload repository data
        uses: actions/upload-artifact@v4
        with:
          name: 'httpd.repository.json'
          path: 'httpd.repository.json'
          retention-days: 1
      - name: Upload tag data
        uses: actions/upload-artifact@v4
        with:
          name: 'httpd'
          path: 'httpd'
          retention-days: 1

  sentry:
    runs-on: ubuntu-latest
    steps:
      - name: Fetch data about the repository
        run: curl -L -o sentry.repository.json -s 'https://hub.docker.com/v2/repositories/library/sentry'
      - name: Fetch data about the tag
        run: curl -L -o sentry.tag.json -s 'https://hub.docker.com/v2/repositories/library/sentry/tags/latest'
      - name: Pull image
        run: docker pull sentry:latest
      - name: Create report
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'sentry:latest'
          format: 'json'
          output: 'sentry.report.json'
          scanners: 'vuln,secret,config'
      - name: Upload scan report
        uses: actions/upload-artifact@v4
        with:
          name: 'sentry.report.json'
          path: 'sentry.report.json'
          retention-days: 1
      - name: Upload repository data
        uses: actions/upload-artifact@v4
        with:
          name: 'sentry.repository.json'
          path: 'sentry.repository.json'
          retention-days: 1
      - name: Upload tag data
        uses: actions/upload-artifact@v4
        with:
          name: 'sentry'
          path: 'sentry'
          retention-days: 1

  r-base:
    runs-on: ubuntu-latest
    steps:
      - name: Fetch data about the repository
        run: curl -L -o r-base.repository.json -s 'https://hub.docker.com/v2/repositories/library/r-base'
      - name: Fetch data about the tag
        run: curl -L -o r-base.tag.json -s 'https://hub.docker.com/v2/repositories/library/r-base/tags/latest'
      - name: Pull image
        run: docker pull r-base:latest
      - name: Create report
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'r-base:latest'
          format: 'json'
          output: 'r-base.report.json'
          scanners: 'vuln,secret,config'
      - name: Upload scan report
        uses: actions/upload-artifact@v4
        with:
          name: 'r-base.report.json'
          path: 'r-base.report.json'
          retention-days: 1
      - name: Upload repository data
        uses: actions/upload-artifact@v4
        with:
          name: 'r-base.repository.json'
          path: 'r-base.repository.json'
          retention-days: 1
      - name: Upload tag data
        uses: actions/upload-artifact@v4
        with:
          name: 'r-base'
          path: 'r-base'
          retention-days: 1

  mariadb:
    runs-on: ubuntu-latest
    steps:
      - name: Fetch data about the repository
        run: curl -L -o mariadb.repository.json -s 'https://hub.docker.com/v2/repositories/library/mariadb'
      - name: Fetch data about the tag
        run: curl -L -o mariadb.tag.json -s 'https://hub.docker.com/v2/repositories/library/mariadb/tags/latest'
      - name: Pull image
        run: docker pull mariadb:latest
      - name: Create report
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'mariadb:latest'
          format: 'json'
          output: 'mariadb.report.json'
          scanners: 'vuln,secret,config'
      - name: Upload scan report
        uses: actions/upload-artifact@v4
        with:
          name: 'mariadb.report.json'
          path: 'mariadb.report.json'
          retention-days: 1
      - name: Upload repository data
        uses: actions/upload-artifact@v4
        with:
          name: 'mariadb.repository.json'
          path: 'mariadb.repository.json'
          retention-days: 1
      - name: Upload tag data
        uses: actions/upload-artifact@v4
        with:
          name: 'mariadb'
          path: 'mariadb'
          retention-days: 1

  thrift:
    runs-on: ubuntu-latest
    steps:
      - name: Fetch data about the repository
        run: curl -L -o thrift.repository.json -s 'https://hub.docker.com/v2/repositories/library/thrift'
      - name: Fetch data about the tag
        run: curl -L -o thrift.tag.json -s 'https://hub.docker.com/v2/repositories/library/thrift/tags/latest'
      - name: Pull image
        run: docker pull thrift:latest
      - name: Create report
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'thrift:latest'
          format: 'json'
          output: 'thrift.report.json'
          scanners: 'vuln,secret,config'
      - name: Upload scan report
        uses: actions/upload-artifact@v4
        with:
          name: 'thrift.report.json'
          path: 'thrift.report.json'
          retention-days: 1
      - name: Upload repository data
        uses: actions/upload-artifact@v4
        with:
          name: 'thrift.repository.json'
          path: 'thrift.repository.json'
          retention-days: 1
      - name: Upload tag data
        uses: actions/upload-artifact@v4
        with:
          name: 'thrift'
          path: 'thrift'
          retention-days: 1

  pypy:
    runs-on: ubuntu-latest
    steps:
      - name: Fetch data about the repository
        run: curl -L -o pypy.repository.json -s 'https://hub.docker.com/v2/repositories/library/pypy'
      - name: Fetch data about the tag
        run: curl -L -o pypy.tag.json -s 'https://hub.docker.com/v2/repositories/library/pypy/tags/latest'
      - name: Pull image
        run: docker pull pypy:latest
      - name: Create report
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'pypy:latest'
          format: 'json'
          output: 'pypy.report.json'
          scanners: 'vuln,secret,config'
      - name: Upload scan report
        uses: actions/upload-artifact@v4
        with:
          name: 'pypy.report.json'
          path: 'pypy.report.json'
          retention-days: 1
      - name: Upload repository data
        uses: actions/upload-artifact@v4
        with:
          name: 'pypy.repository.json'
          path: 'pypy.repository.json'
          retention-days: 1
      - name: Upload tag data
        uses: actions/upload-artifact@v4
        with:
          name: 'pypy'
          path: 'pypy'
          retention-days: 1

  django:
    runs-on: ubuntu-latest
    steps:
      - name: Fetch data about the repository
        run: curl -L -o django.repository.json -s 'https://hub.docker.com/v2/repositories/library/django'
      - name: Fetch data about the tag
        run: curl -L -o django.tag.json -s 'https://hub.docker.com/v2/repositories/library/django/tags/latest'
      - name: Pull image
        run: docker pull django:latest
      - name: Create report
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'django:latest'
          format: 'json'
          output: 'django.report.json'
          scanners: 'vuln,secret,config'
      - name: Upload scan report
        uses: actions/upload-artifact@v4
        with:
          name: 'django.report.json'
          path: 'django.report.json'
          retention-days: 1
      - name: Upload repository data
        uses: actions/upload-artifact@v4
        with:
          name: 'django.repository.json'
          path: 'django.repository.json'
          retention-days: 1
      - name: Upload tag data
        uses: actions/upload-artifact@v4
        with:
          name: 'django'
          path: 'django'
          retention-days: 1

  haproxy:
    runs-on: ubuntu-latest
    steps:
      - name: Fetch data about the repository
        run: curl -L -o haproxy.repository.json -s 'https://hub.docker.com/v2/repositories/library/haproxy'
      - name: Fetch data about the tag
        run: curl -L -o haproxy.tag.json -s 'https://hub.docker.com/v2/repositories/library/haproxy/tags/latest'
      - name: Pull image
        run: docker pull haproxy:latest
      - name: Create report
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'haproxy:latest'
          format: 'json'
          output: 'haproxy.report.json'
          scanners: 'vuln,secret,config'
      - name: Upload scan report
        uses: actions/upload-artifact@v4
        with:
          name: 'haproxy.report.json'
          path: 'haproxy.report.json'
          retention-days: 1
      - name: Upload repository data
        uses: actions/upload-artifact@v4
        with:
          name: 'haproxy.repository.json'
          path: 'haproxy.repository.json'
          retention-days: 1
      - name: Upload tag data
        uses: actions/upload-artifact@v4
        with:
          name: 'haproxy'
          path: 'haproxy'
          retention-days: 1

  memcached:
    runs-on: ubuntu-latest
    steps:
      - name: Fetch data about the repository
        run: curl -L -o memcached.repository.json -s 'https://hub.docker.com/v2/repositories/library/memcached'
      - name: Fetch data about the tag
        run: curl -L -o memcached.tag.json -s 'https://hub.docker.com/v2/repositories/library/memcached/tags/latest'
      - name: Pull image
        run: docker pull memcached:latest
      - name: Create report
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'memcached:latest'
          format: 'json'
          output: 'memcached.report.json'
          scanners: 'vuln,secret,config'
      - name: Upload scan report
        uses: actions/upload-artifact@v4
        with:
          name: 'memcached.report.json'
          path: 'memcached.report.json'
          retention-days: 1
      - name: Upload repository data
        uses: actions/upload-artifact@v4
        with:
          name: 'memcached.repository.json'
          path: 'memcached.repository.json'
          retention-days: 1
      - name: Upload tag data
        uses: actions/upload-artifact@v4
        with:
          name: 'memcached'
          path: 'memcached'
          retention-days: 1

  rabbitmq:
    runs-on: ubuntu-latest
    steps:
      - name: Fetch data about the repository
        run: curl -L -o rabbitmq.repository.json -s 'https://hub.docker.com/v2/repositories/library/rabbitmq'
      - name: Fetch data about the tag
        run: curl -L -o rabbitmq.tag.json -s 'https://hub.docker.com/v2/repositories/library/rabbitmq/tags/latest'
      - name: Pull image
        run: docker pull rabbitmq:latest
      - name: Create report
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'rabbitmq:latest'
          format: 'json'
          output: 'rabbitmq.report.json'
          scanners: 'vuln,secret,config'
      - name: Upload scan report
        uses: actions/upload-artifact@v4
        with:
          name: 'rabbitmq.report.json'
          path: 'rabbitmq.report.json'
          retention-days: 1
      - name: Upload repository data
        uses: actions/upload-artifact@v4
        with:
          name: 'rabbitmq.repository.json'
          path: 'rabbitmq.repository.json'
          retention-days: 1
      - name: Upload tag data
        uses: actions/upload-artifact@v4
        with:
          name: 'rabbitmq'
          path: 'rabbitmq'
          retention-days: 1

  oraclelinux:
    runs-on: ubuntu-latest
    steps:
      - name: Fetch data about the repository
        run: curl -L -o oraclelinux.repository.json -s 'https://hub.docker.com/v2/repositories/library/oraclelinux'
      - name: Fetch data about the tag
        run: curl -L -o oraclelinux.tag.json -s 'https://hub.docker.com/v2/repositories/library/oraclelinux/tags/9-slim-fips'
      - name: Pull image
        run: docker pull oraclelinux:9-slim-fips
      - name: Create report
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'oraclelinux:9-slim-fips'
          format: 'json'
          output: 'oraclelinux.report.json'
          scanners: 'vuln,secret,config'
      - name: Upload scan report
        uses: actions/upload-artifact@v4
        with:
          name: 'oraclelinux.report.json'
          path: 'oraclelinux.report.json'
          retention-days: 1
      - name: Upload repository data
        uses: actions/upload-artifact@v4
        with:
          name: 'oraclelinux.repository.json'
          path: 'oraclelinux.repository.json'
          retention-days: 1
      - name: Upload tag data
        uses: actions/upload-artifact@v4
        with:
          name: 'oraclelinux'
          path: 'oraclelinux'
          retention-days: 1

  odoo:
    runs-on: ubuntu-latest
    steps:
      - name: Fetch data about the repository
        run: curl -L -o odoo.repository.json -s 'https://hub.docker.com/v2/repositories/library/odoo'
      - name: Fetch data about the tag
        run: curl -L -o odoo.tag.json -s 'https://hub.docker.com/v2/repositories/library/odoo/tags/latest'
      - name: Pull image
        run: docker pull odoo:latest
      - name: Create report
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'odoo:latest'
          format: 'json'
          output: 'odoo.report.json'
          scanners: 'vuln,secret,config'
      - name: Upload scan report
        uses: actions/upload-artifact@v4
        with:
          name: 'odoo.report.json'
          path: 'odoo.report.json'
          retention-days: 1
      - name: Upload repository data
        uses: actions/upload-artifact@v4
        with:
          name: 'odoo.repository.json'
          path: 'odoo.repository.json'
          retention-days: 1
      - name: Upload tag data
        uses: actions/upload-artifact@v4
        with:
          name: 'odoo'
          path: 'odoo'
          retention-days: 1

  rethinkdb:
    runs-on: ubuntu-latest
    steps:
      - name: Fetch data about the repository
        run: curl -L -o rethinkdb.repository.json -s 'https://hub.docker.com/v2/repositories/library/rethinkdb'
      - name: Fetch data about the tag
        run: curl -L -o rethinkdb.tag.json -s 'https://hub.docker.com/v2/repositories/library/rethinkdb/tags/latest'
      - name: Pull image
        run: docker pull rethinkdb:latest
      - name: Create report
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'rethinkdb:latest'
          format: 'json'
          output: 'rethinkdb.report.json'
          scanners: 'vuln,secret,config'
      - name: Upload scan report
        uses: actions/upload-artifact@v4
        with:
          name: 'rethinkdb.report.json'
          path: 'rethinkdb.report.json'
          retention-days: 1
      - name: Upload repository data
        uses: actions/upload-artifact@v4
        with:
          name: 'rethinkdb.repository.json'
          path: 'rethinkdb.repository.json'
          retention-days: 1
      - name: Upload tag data
        uses: actions/upload-artifact@v4
        with:
          name: 'rethinkdb'
          path: 'rethinkdb'
          retention-days: 1

  iojs:
    runs-on: ubuntu-latest
    steps:
      - name: Fetch data about the repository
        run: curl -L -o iojs.repository.json -s 'https://hub.docker.com/v2/repositories/library/iojs'
      - name: Fetch data about the tag
        run: curl -L -o iojs.tag.json -s 'https://hub.docker.com/v2/repositories/library/iojs/tags/latest'
      - name: Pull image
        run: docker pull iojs:latest
      - name: Create report
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'iojs:latest'
          format: 'json'
          output: 'iojs.report.json'
          scanners: 'vuln,secret,config'
      - name: Upload scan report
        uses: actions/upload-artifact@v4
        with:
          name: 'iojs.report.json'
          path: 'iojs.report.json'
          retention-days: 1
      - name: Upload repository data
        uses: actions/upload-artifact@v4
        with:
          name: 'iojs.repository.json'
          path: 'iojs.repository.json'
          retention-days: 1
      - name: Upload tag data
        uses: actions/upload-artifact@v4
        with:
          name: 'iojs'
          path: 'iojs'
          retention-days: 1

  websphere-liberty:
    runs-on: ubuntu-latest
    steps:
      - name: Fetch data about the repository
        run: curl -L -o websphere-liberty.repository.json -s 'https://hub.docker.com/v2/repositories/library/websphere-liberty'
      - name: Fetch data about the tag
        run: curl -L -o websphere-liberty.tag.json -s 'https://hub.docker.com/v2/repositories/library/websphere-liberty/tags/latest'
      - name: Pull image
        run: docker pull websphere-liberty:latest
      - name: Create report
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'websphere-liberty:latest'
          format: 'json'
          output: 'websphere-liberty.report.json'
          scanners: 'vuln,secret,config'
      - name: Upload scan report
        uses: actions/upload-artifact@v4
        with:
          name: 'websphere-liberty.report.json'
          path: 'websphere-liberty.report.json'
          retention-days: 1
      - name: Upload repository data
        uses: actions/upload-artifact@v4
        with:
          name: 'websphere-liberty.repository.json'
          path: 'websphere-liberty.repository.json'
          retention-days: 1
      - name: Upload tag data
        uses: actions/upload-artifact@v4
        with:
          name: 'websphere-liberty'
          path: 'websphere-liberty'
          retention-days: 1

  irssi:
    runs-on: ubuntu-latest
    steps:
      - name: Fetch data about the repository
        run: curl -L -o irssi.repository.json -s 'https://hub.docker.com/v2/repositories/library/irssi'
      - name: Fetch data about the tag
        run: curl -L -o irssi.tag.json -s 'https://hub.docker.com/v2/repositories/library/irssi/tags/latest'
      - name: Pull image
        run: docker pull irssi:latest
      - name: Create report
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'irssi:latest'
          format: 'json'
          output: 'irssi.report.json'
          scanners: 'vuln,secret,config'
      - name: Upload scan report
        uses: actions/upload-artifact@v4
        with:
          name: 'irssi.report.json'
          path: 'irssi.report.json'
          retention-days: 1
      - name: Upload repository data
        uses: actions/upload-artifact@v4
        with:
          name: 'irssi.repository.json'
          path: 'irssi.repository.json'
          retention-days: 1
      - name: Upload tag data
        uses: actions/upload-artifact@v4
        with:
          name: 'irssi'
          path: 'irssi'
          retention-days: 1

  swarm:
    runs-on: ubuntu-latest
    steps:
      - name: Fetch data about the repository
        run: curl -L -o swarm.repository.json -s 'https://hub.docker.com/v2/repositories/library/swarm'
      - name: Fetch data about the tag
        run: curl -L -o swarm.tag.json -s 'https://hub.docker.com/v2/repositories/library/swarm/tags/latest'
      - name: Pull image
        run: docker pull swarm:latest
      - name: Create report
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'swarm:latest'
          format: 'json'
          output: 'swarm.report.json'
          scanners: 'vuln,secret,config'
      - name: Upload scan report
        uses: actions/upload-artifact@v4
        with:
          name: 'swarm.report.json'
          path: 'swarm.report.json'
          retention-days: 1
      - name: Upload repository data
        uses: actions/upload-artifact@v4
        with:
          name: 'swarm.repository.json'
          path: 'swarm.repository.json'
          retention-days: 1
      - name: Upload tag data
        uses: actions/upload-artifact@v4
        with:
          name: 'swarm'
          path: 'swarm'
          retention-days: 1

  elasticsearch:
    runs-on: ubuntu-latest
    steps:
      - name: Fetch data about the repository
        run: curl -L -o elasticsearch.repository.json -s 'https://hub.docker.com/v2/repositories/library/elasticsearch'
      - name: Fetch data about the tag
        run: curl -L -o elasticsearch.tag.json -s 'https://hub.docker.com/v2/repositories/library/elasticsearch/tags/7.17.22'
      - name: Pull image
        run: docker pull elasticsearch:7.17.22
      - name: Create report
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'elasticsearch:7.17.22'
          format: 'json'
          output: 'elasticsearch.report.json'
          scanners: 'vuln,secret,config'
      - name: Upload scan report
        uses: actions/upload-artifact@v4
        with:
          name: 'elasticsearch.report.json'
          path: 'elasticsearch.report.json'
          retention-days: 1
      - name: Upload repository data
        uses: actions/upload-artifact@v4
        with:
          name: 'elasticsearch.repository.json'
          path: 'elasticsearch.repository.json'
          retention-days: 1
      - name: Upload tag data
        uses: actions/upload-artifact@v4
        with:
          name: 'elasticsearch'
          path: 'elasticsearch'
          retention-days: 1

  jetty:
    runs-on: ubuntu-latest
    steps:
      - name: Fetch data about the repository
        run: curl -L -o jetty.repository.json -s 'https://hub.docker.com/v2/repositories/library/jetty'
      - name: Fetch data about the tag
        run: curl -L -o jetty.tag.json -s 'https://hub.docker.com/v2/repositories/library/jetty/tags/latest'
      - name: Pull image
        run: docker pull jetty:latest
      - name: Create report
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'jetty:latest'
          format: 'json'
          output: 'jetty.report.json'
          scanners: 'vuln,secret,config'
      - name: Upload scan report
        uses: actions/upload-artifact@v4
        with:
          name: 'jetty.report.json'
          path: 'jetty.report.json'
          retention-days: 1
      - name: Upload repository data
        uses: actions/upload-artifact@v4
        with:
          name: 'jetty.repository.json'
          path: 'jetty.repository.json'
          retention-days: 1
      - name: Upload tag data
        uses: actions/upload-artifact@v4
        with:
          name: 'jetty'
          path: 'jetty'
          retention-days: 1

  ghost:
    runs-on: ubuntu-latest
    steps:
      - name: Fetch data about the repository
        run: curl -L -o ghost.repository.json -s 'https://hub.docker.com/v2/repositories/library/ghost'
      - name: Fetch data about the tag
        run: curl -L -o ghost.tag.json -s 'https://hub.docker.com/v2/repositories/library/ghost/tags/latest'
      - name: Pull image
        run: docker pull ghost:latest
      - name: Create report
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'ghost:latest'
          format: 'json'
          output: 'ghost.report.json'
          scanners: 'vuln,secret,config'
      - name: Upload scan report
        uses: actions/upload-artifact@v4
        with:
          name: 'ghost.report.json'
          path: 'ghost.report.json'
          retention-days: 1
      - name: Upload repository data
        uses: actions/upload-artifact@v4
        with:
          name: 'ghost.repository.json'
          path: 'ghost.repository.json'
          retention-days: 1
      - name: Upload tag data
        uses: actions/upload-artifact@v4
        with:
          name: 'ghost'
          path: 'ghost'
          retention-days: 1

  celery:
    runs-on: ubuntu-latest
    steps:
      - name: Fetch data about the repository
        run: curl -L -o celery.repository.json -s 'https://hub.docker.com/v2/repositories/library/celery'
      - name: Fetch data about the tag
        run: curl -L -o celery.tag.json -s 'https://hub.docker.com/v2/repositories/library/celery/tags/latest'
      - name: Pull image
        run: docker pull celery:latest
      - name: Create report
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'celery:latest'
          format: 'json'
          output: 'celery.report.json'
          scanners: 'vuln,secret,config'
      - name: Upload scan report
        uses: actions/upload-artifact@v4
        with:
          name: 'celery.report.json'
          path: 'celery.report.json'
          retention-days: 1
      - name: Upload repository data
        uses: actions/upload-artifact@v4
        with:
          name: 'celery.repository.json'
          path: 'celery.repository.json'
          retention-days: 1
      - name: Upload tag data
        uses: actions/upload-artifact@v4
        with:
          name: 'celery'
          path: 'celery'
          retention-days: 1

  percona:
    runs-on: ubuntu-latest
    steps:
      - name: Fetch data about the repository
        run: curl -L -o percona.repository.json -s 'https://hub.docker.com/v2/repositories/library/percona'
      - name: Fetch data about the tag
        run: curl -L -o percona.tag.json -s 'https://hub.docker.com/v2/repositories/library/percona/tags/latest'
      - name: Pull image
        run: docker pull percona:latest
      - name: Create report
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'percona:latest'
          format: 'json'
          output: 'percona.report.json'
          scanners: 'vuln,secret,config'
      - name: Upload scan report
        uses: actions/upload-artifact@v4
        with:
          name: 'percona.report.json'
          path: 'percona.report.json'
          retention-days: 1
      - name: Upload repository data
        uses: actions/upload-artifact@v4
        with:
          name: 'percona.repository.json'
          path: 'percona.repository.json'
          retention-days: 1
      - name: Upload tag data
        uses: actions/upload-artifact@v4
        with:
          name: 'percona'
          path: 'percona'
          retention-days: 1

  aerospike:
    runs-on: ubuntu-latest
    steps:
      - name: Fetch data about the repository
        run: curl -L -o aerospike.repository.json -s 'https://hub.docker.com/v2/repositories/library/aerospike'
      - name: Fetch data about the tag
        run: curl -L -o aerospike.tag.json -s 'https://hub.docker.com/v2/repositories/library/aerospike/tags/ee-7.1.0.2_1'
      - name: Pull image
        run: docker pull aerospike:ee-7.1.0.2_1
      - name: Create report
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'aerospike:ee-7.1.0.2_1'
          format: 'json'
          output: 'aerospike.report.json'
          scanners: 'vuln,secret,config'
      - name: Upload scan report
        uses: actions/upload-artifact@v4
        with:
          name: 'aerospike.report.json'
          path: 'aerospike.report.json'
          retention-days: 1
      - name: Upload repository data
        uses: actions/upload-artifact@v4
        with:
          name: 'aerospike.repository.json'
          path: 'aerospike.repository.json'
          retention-days: 1
      - name: Upload tag data
        uses: actions/upload-artifact@v4
        with:
          name: 'aerospike'
          path: 'aerospike'
          retention-days: 1

  logstash:
    runs-on: ubuntu-latest
    steps:
      - name: Fetch data about the repository
        run: curl -L -o logstash.repository.json -s 'https://hub.docker.com/v2/repositories/library/logstash'
      - name: Fetch data about the tag
        run: curl -L -o logstash.tag.json -s 'https://hub.docker.com/v2/repositories/library/logstash/tags/7.17.22'
      - name: Pull image
        run: docker pull logstash:7.17.22
      - name: Create report
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'logstash:7.17.22'
          format: 'json'
          output: 'logstash.report.json'
          scanners: 'vuln,secret,config'
      - name: Upload scan report
        uses: actions/upload-artifact@v4
        with:
          name: 'logstash.report.json'
          path: 'logstash.report.json'
          retention-days: 1
      - name: Upload repository data
        uses: actions/upload-artifact@v4
        with:
          name: 'logstash.repository.json'
          path: 'logstash.repository.json'
          retention-days: 1
      - name: Upload tag data
        uses: actions/upload-artifact@v4
        with:
          name: 'logstash'
          path: 'logstash'
          retention-days: 1

  julia:
    runs-on: ubuntu-latest
    steps:
      - name: Fetch data about the repository
        run: curl -L -o julia.repository.json -s 'https://hub.docker.com/v2/repositories/library/julia'
      - name: Fetch data about the tag
        run: curl -L -o julia.tag.json -s 'https://hub.docker.com/v2/repositories/library/julia/tags/latest'
      - name: Pull image
        run: docker pull julia:latest
      - name: Create report
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'julia:latest'
          format: 'json'
          output: 'julia.report.json'
          scanners: 'vuln,secret,config'
      - name: Upload scan report
        uses: actions/upload-artifact@v4
        with:
          name: 'julia.report.json'
          path: 'julia.report.json'
          retention-days: 1
      - name: Upload repository data
        uses: actions/upload-artifact@v4
        with:
          name: 'julia.repository.json'
          path: 'julia.repository.json'
          retention-days: 1
      - name: Upload tag data
        uses: actions/upload-artifact@v4
        with:
          name: 'julia'
          path: 'julia'
          retention-days: 1

  alpine:
    runs-on: ubuntu-latest
    steps:
      - name: Fetch data about the repository
        run: curl -L -o alpine.repository.json -s 'https://hub.docker.com/v2/repositories/library/alpine'
      - name: Fetch data about the tag
        run: curl -L -o alpine.tag.json -s 'https://hub.docker.com/v2/repositories/library/alpine/tags/latest'
      - name: Pull image
        run: docker pull alpine:latest
      - name: Create report
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'alpine:latest'
          format: 'json'
          output: 'alpine.report.json'
          scanners: 'vuln,secret,config'
      - name: Upload scan report
        uses: actions/upload-artifact@v4
        with:
          name: 'alpine.report.json'
          path: 'alpine.report.json'
          retention-days: 1
      - name: Upload repository data
        uses: actions/upload-artifact@v4
        with:
          name: 'alpine.repository.json'
          path: 'alpine.repository.json'
          retention-days: 1
      - name: Upload tag data
        uses: actions/upload-artifact@v4
        with:
          name: 'alpine'
          path: 'alpine'
          retention-days: 1

  rakudo-star:
    runs-on: ubuntu-latest
    steps:
      - name: Fetch data about the repository
        run: curl -L -o rakudo-star.repository.json -s 'https://hub.docker.com/v2/repositories/library/rakudo-star'
      - name: Fetch data about the tag
        run: curl -L -o rakudo-star.tag.json -s 'https://hub.docker.com/v2/repositories/library/rakudo-star/tags/latest'
      - name: Pull image
        run: docker pull rakudo-star:latest
      - name: Create report
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'rakudo-star:latest'
          format: 'json'
          output: 'rakudo-star.report.json'
          scanners: 'vuln,secret,config'
      - name: Upload scan report
        uses: actions/upload-artifact@v4
        with:
          name: 'rakudo-star.report.json'
          path: 'rakudo-star.report.json'
          retention-days: 1
      - name: Upload repository data
        uses: actions/upload-artifact@v4
        with:
          name: 'rakudo-star.repository.json'
          path: 'rakudo-star.repository.json'
          retention-days: 1
      - name: Upload tag data
        uses: actions/upload-artifact@v4
        with:
          name: 'rakudo-star'
          path: 'rakudo-star'
          retention-days: 1

  drupal:
    runs-on: ubuntu-latest
    steps:
      - name: Fetch data about the repository
        run: curl -L -o drupal.repository.json -s 'https://hub.docker.com/v2/repositories/library/drupal'
      - name: Fetch data about the tag
        run: curl -L -o drupal.tag.json -s 'https://hub.docker.com/v2/repositories/library/drupal/tags/latest'
      - name: Pull image
        run: docker pull drupal:latest
      - name: Create report
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'drupal:latest'
          format: 'json'
          output: 'drupal.report.json'
          scanners: 'vuln,secret,config'
      - name: Upload scan report
        uses: actions/upload-artifact@v4
        with:
          name: 'drupal.report.json'
          path: 'drupal.report.json'
          retention-days: 1
      - name: Upload repository data
        uses: actions/upload-artifact@v4
        with:
          name: 'drupal.repository.json'
          path: 'drupal.repository.json'
          retention-days: 1
      - name: Upload tag data
        uses: actions/upload-artifact@v4
        with:
          name: 'drupal'
          path: 'drupal'
          retention-days: 1

  cassandra:
    runs-on: ubuntu-latest
    steps:
      - name: Fetch data about the repository
        run: curl -L -o cassandra.repository.json -s 'https://hub.docker.com/v2/repositories/library/cassandra'
      - name: Fetch data about the tag
        run: curl -L -o cassandra.tag.json -s 'https://hub.docker.com/v2/repositories/library/cassandra/tags/latest'
      - name: Pull image
        run: docker pull cassandra:latest
      - name: Create report
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'cassandra:latest'
          format: 'json'
          output: 'cassandra.report.json'
          scanners: 'vuln,secret,config'
      - name: Upload scan report
        uses: actions/upload-artifact@v4
        with:
          name: 'cassandra.report.json'
          path: 'cassandra.report.json'
          retention-days: 1
      - name: Upload repository data
        uses: actions/upload-artifact@v4
        with:
          name: 'cassandra.repository.json'
          path: 'cassandra.repository.json'
          retention-days: 1
      - name: Upload tag data
        uses: actions/upload-artifact@v4
        with:
          name: 'cassandra'
          path: 'cassandra'
          retention-days: 1

  sonarqube:
    runs-on: ubuntu-latest
    steps:
      - name: Fetch data about the repository
        run: curl -L -o sonarqube.repository.json -s 'https://hub.docker.com/v2/repositories/library/sonarqube'
      - name: Fetch data about the tag
        run: curl -L -o sonarqube.tag.json -s 'https://hub.docker.com/v2/repositories/library/sonarqube/tags/latest'
      - name: Pull image
        run: docker pull sonarqube:latest
      - name: Create report
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'sonarqube:latest'
          format: 'json'
          output: 'sonarqube.report.json'
          scanners: 'vuln,secret,config'
      - name: Upload scan report
        uses: actions/upload-artifact@v4
        with:
          name: 'sonarqube.report.json'
          path: 'sonarqube.report.json'
          retention-days: 1
      - name: Upload repository data
        uses: actions/upload-artifact@v4
        with:
          name: 'sonarqube.repository.json'
          path: 'sonarqube.repository.json'
          retention-days: 1
      - name: Upload tag data
        uses: actions/upload-artifact@v4
        with:
          name: 'sonarqube'
          path: 'sonarqube'
          retention-days: 1

  couchbase:
    runs-on: ubuntu-latest
    steps:
      - name: Fetch data about the repository
        run: curl -L -o couchbase.repository.json -s 'https://hub.docker.com/v2/repositories/library/couchbase'
      - name: Fetch data about the tag
        run: curl -L -o couchbase.tag.json -s 'https://hub.docker.com/v2/repositories/library/couchbase/tags/latest'
      - name: Pull image
        run: docker pull couchbase:latest
      - name: Create report
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'couchbase:latest'
          format: 'json'
          output: 'couchbase.report.json'
          scanners: 'vuln,secret,config'
      - name: Upload scan report
        uses: actions/upload-artifact@v4
        with:
          name: 'couchbase.report.json'
          path: 'couchbase.report.json'
          retention-days: 1
      - name: Upload repository data
        uses: actions/upload-artifact@v4
        with:
          name: 'couchbase.repository.json'
          path: 'couchbase.repository.json'
          retention-days: 1
      - name: Upload tag data
        uses: actions/upload-artifact@v4
        with:
          name: 'couchbase'
          path: 'couchbase'
          retention-days: 1

  ros:
    runs-on: ubuntu-latest
    steps:
      - name: Fetch data about the repository
        run: curl -L -o ros.repository.json -s 'https://hub.docker.com/v2/repositories/library/ros'
      - name: Fetch data about the tag
        run: curl -L -o ros.tag.json -s 'https://hub.docker.com/v2/repositories/library/ros/tags/latest'
      - name: Pull image
        run: docker pull ros:latest
      - name: Create report
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'ros:latest'
          format: 'json'
          output: 'ros.report.json'
          scanners: 'vuln,secret,config'
      - name: Upload scan report
        uses: actions/upload-artifact@v4
        with:
          name: 'ros.report.json'
          path: 'ros.report.json'
          retention-days: 1
      - name: Upload repository data
        uses: actions/upload-artifact@v4
        with:
          name: 'ros.repository.json'
          path: 'ros.repository.json'
          retention-days: 1
      - name: Upload tag data
        uses: actions/upload-artifact@v4
        with:
          name: 'ros'
          path: 'ros'
          retention-days: 1

  kibana:
    runs-on: ubuntu-latest
    steps:
      - name: Fetch data about the repository
        run: curl -L -o kibana.repository.json -s 'https://hub.docker.com/v2/repositories/library/kibana'
      - name: Fetch data about the tag
        run: curl -L -o kibana.tag.json -s 'https://hub.docker.com/v2/repositories/library/kibana/tags/7.17.22'
      - name: Pull image
        run: docker pull kibana:7.17.22
      - name: Create report
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'kibana:7.17.22'
          format: 'json'
          output: 'kibana.report.json'
          scanners: 'vuln,secret,config'
      - name: Upload scan report
        uses: actions/upload-artifact@v4
        with:
          name: 'kibana.report.json'
          path: 'kibana.report.json'
          retention-days: 1
      - name: Upload repository data
        uses: actions/upload-artifact@v4
        with:
          name: 'kibana.repository.json'
          path: 'kibana.repository.json'
          retention-days: 1
      - name: Upload tag data
        uses: actions/upload-artifact@v4
        with:
          name: 'kibana'
          path: 'kibana'
          retention-days: 1

  kaazing-gateway:
    runs-on: ubuntu-latest
    steps:
      - name: Fetch data about the repository
        run: curl -L -o kaazing-gateway.repository.json -s 'https://hub.docker.com/v2/repositories/library/kaazing-gateway'
      - name: Fetch data about the tag
        run: curl -L -o kaazing-gateway.tag.json -s 'https://hub.docker.com/v2/repositories/library/kaazing-gateway/tags/latest'
      - name: Pull image
        run: docker pull kaazing-gateway:latest
      - name: Create report
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'kaazing-gateway:latest'
          format: 'json'
          output: 'kaazing-gateway.report.json'
          scanners: 'vuln,secret,config'
      - name: Upload scan report
        uses: actions/upload-artifact@v4
        with:
          name: 'kaazing-gateway.report.json'
          path: 'kaazing-gateway.report.json'
          retention-days: 1
      - name: Upload repository data
        uses: actions/upload-artifact@v4
        with:
          name: 'kaazing-gateway.repository.json'
          path: 'kaazing-gateway.repository.json'
          retention-days: 1
      - name: Upload tag data
        uses: actions/upload-artifact@v4
        with:
          name: 'kaazing-gateway'
          path: 'kaazing-gateway'
          retention-days: 1

  arangodb:
    runs-on: ubuntu-latest
    steps:
      - name: Fetch data about the repository
        run: curl -L -o arangodb.repository.json -s 'https://hub.docker.com/v2/repositories/library/arangodb'
      - name: Fetch data about the tag
        run: curl -L -o arangodb.tag.json -s 'https://hub.docker.com/v2/repositories/library/arangodb/tags/latest'
      - name: Pull image
        run: docker pull arangodb:latest
      - name: Create report
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'arangodb:latest'
          format: 'json'
          output: 'arangodb.report.json'
          scanners: 'vuln,secret,config'
      - name: Upload scan report
        uses: actions/upload-artifact@v4
        with:
          name: 'arangodb.report.json'
          path: 'arangodb.report.json'
          retention-days: 1
      - name: Upload repository data
        uses: actions/upload-artifact@v4
        with:
          name: 'arangodb.repository.json'
          path: 'arangodb.repository.json'
          retention-days: 1
      - name: Upload tag data
        uses: actions/upload-artifact@v4
        with:
          name: 'arangodb'
          path: 'arangodb'
          retention-days: 1

  owncloud:
    runs-on: ubuntu-latest
    steps:
      - name: Fetch data about the repository
        run: curl -L -o owncloud.repository.json -s 'https://hub.docker.com/v2/repositories/library/owncloud'
      - name: Fetch data about the tag
        run: curl -L -o owncloud.tag.json -s 'https://hub.docker.com/v2/repositories/library/owncloud/tags/latest'
      - name: Pull image
        run: docker pull owncloud:latest
      - name: Create report
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'owncloud:latest'
          format: 'json'
          output: 'owncloud.report.json'
          scanners: 'vuln,secret,config'
      - name: Upload scan report
        uses: actions/upload-artifact@v4
        with:
          name: 'owncloud.report.json'
          path: 'owncloud.report.json'
          retention-days: 1
      - name: Upload repository data
        uses: actions/upload-artifact@v4
        with:
          name: 'owncloud.repository.json'
          path: 'owncloud.repository.json'
          retention-days: 1
      - name: Upload tag data
        uses: actions/upload-artifact@v4
        with:
          name: 'owncloud'
          path: 'owncloud'
          retention-days: 1

  gazebo:
    runs-on: ubuntu-latest
    steps:
      - name: Fetch data about the repository
        run: curl -L -o gazebo.repository.json -s 'https://hub.docker.com/v2/repositories/library/gazebo'
      - name: Fetch data about the tag
        run: curl -L -o gazebo.tag.json -s 'https://hub.docker.com/v2/repositories/library/gazebo/tags/latest'
      - name: Pull image
        run: docker pull gazebo:latest
      - name: Create report
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'gazebo:latest'
          format: 'json'
          output: 'gazebo.report.json'
          scanners: 'vuln,secret,config'
      - name: Upload scan report
        uses: actions/upload-artifact@v4
        with:
          name: 'gazebo.report.json'
          path: 'gazebo.report.json'
          retention-days: 1
      - name: Upload repository data
        uses: actions/upload-artifact@v4
        with:
          name: 'gazebo.repository.json'
          path: 'gazebo.repository.json'
          retention-days: 1
      - name: Upload tag data
        uses: actions/upload-artifact@v4
        with:
          name: 'gazebo'
          path: 'gazebo'
          retention-days: 1

  joomla:
    runs-on: ubuntu-latest
    steps:
      - name: Fetch data about the repository
        run: curl -L -o joomla.repository.json -s 'https://hub.docker.com/v2/repositories/library/joomla'
      - name: Fetch data about the tag
        run: curl -L -o joomla.tag.json -s 'https://hub.docker.com/v2/repositories/library/joomla/tags/latest'
      - name: Pull image
        run: docker pull joomla:latest
      - name: Create report
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'joomla:latest'
          format: 'json'
          output: 'joomla.report.json'
          scanners: 'vuln,secret,config'
      - name: Upload scan report
        uses: actions/upload-artifact@v4
        with:
          name: 'joomla.report.json'
          path: 'joomla.report.json'
          retention-days: 1
      - name: Upload repository data
        uses: actions/upload-artifact@v4
        with:
          name: 'joomla.repository.json'
          path: 'joomla.repository.json'
          retention-days: 1
      - name: Upload tag data
        uses: actions/upload-artifact@v4
        with:
          name: 'joomla'
          path: 'joomla'
          retention-days: 1

  redmine:
    runs-on: ubuntu-latest
    steps:
      - name: Fetch data about the repository
        run: curl -L -o redmine.repository.json -s 'https://hub.docker.com/v2/repositories/library/redmine'
      - name: Fetch data about the tag
        run: curl -L -o redmine.tag.json -s 'https://hub.docker.com/v2/repositories/library/redmine/tags/latest'
      - name: Pull image
        run: docker pull redmine:latest
      - name: Create report
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'redmine:latest'
          format: 'json'
          output: 'redmine.report.json'
          scanners: 'vuln,secret,config'
      - name: Upload scan report
        uses: actions/upload-artifact@v4
        with:
          name: 'redmine.report.json'
          path: 'redmine.report.json'
          retention-days: 1
      - name: Upload repository data
        uses: actions/upload-artifact@v4
        with:
          name: 'redmine.repository.json'
          path: 'redmine.repository.json'
          retention-days: 1
      - name: Upload tag data
        uses: actions/upload-artifact@v4
        with:
          name: 'redmine'
          path: 'redmine'
          retention-days: 1

  nats:
    runs-on: ubuntu-latest
    steps:
      - name: Fetch data about the repository
        run: curl -L -o nats.repository.json -s 'https://hub.docker.com/v2/repositories/library/nats'
      - name: Fetch data about the tag
        run: curl -L -o nats.tag.json -s 'https://hub.docker.com/v2/repositories/library/nats/tags/latest'
      - name: Pull image
        run: docker pull nats:latest
      - name: Create report
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'nats:latest'
          format: 'json'
          output: 'nats.report.json'
          scanners: 'vuln,secret,config'
      - name: Upload scan report
        uses: actions/upload-artifact@v4
        with:
          name: 'nats.report.json'
          path: 'nats.report.json'
          retention-days: 1
      - name: Upload repository data
        uses: actions/upload-artifact@v4
        with:
          name: 'nats.repository.json'
          path: 'nats.repository.json'
          retention-days: 1
      - name: Upload tag data
        uses: actions/upload-artifact@v4
        with:
          name: 'nats'
          path: 'nats'
          retention-days: 1

  rocket_chat:
    runs-on: ubuntu-latest
    steps:
      - name: Fetch data about the repository
        run: curl -L -o rocket.chat.repository.json -s 'https://hub.docker.com/v2/repositories/library/rocket.chat'
      - name: Fetch data about the tag
        run: curl -L -o rocket.chat.tag.json -s 'https://hub.docker.com/v2/repositories/library/rocket.chat/tags/latest'
      - name: Pull image
        run: docker pull rocket.chat:latest
      - name: Create report
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'rocket.chat:latest'
          format: 'json'
          output: 'rocket.chat.report.json'
          scanners: 'vuln,secret,config'
      - name: Upload scan report
        uses: actions/upload-artifact@v4
        with:
          name: 'rocket.chat.report.json'
          path: 'rocket.chat.report.json'
          retention-days: 1
      - name: Upload repository data
        uses: actions/upload-artifact@v4
        with:
          name: 'rocket.chat.repository.json'
          path: 'rocket.chat.repository.json'
          retention-days: 1
      - name: Upload tag data
        uses: actions/upload-artifact@v4
        with:
          name: 'rocket.chat'
          path: 'rocket.chat'
          retention-days: 1

  docker:
    runs-on: ubuntu-latest
    steps:
      - name: Fetch data about the repository
        run: curl -L -o docker.repository.json -s 'https://hub.docker.com/v2/repositories/library/docker'
      - name: Fetch data about the tag
        run: curl -L -o docker.tag.json -s 'https://hub.docker.com/v2/repositories/library/docker/tags/latest'
      - name: Pull image
        run: docker pull docker:latest
      - name: Create report
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'docker:latest'
          format: 'json'
          output: 'docker.report.json'
          scanners: 'vuln,secret,config'
      - name: Upload scan report
        uses: actions/upload-artifact@v4
        with:
          name: 'docker.report.json'
          path: 'docker.report.json'
          retention-days: 1
      - name: Upload repository data
        uses: actions/upload-artifact@v4
        with:
          name: 'docker.repository.json'
          path: 'docker.repository.json'
          retention-days: 1
      - name: Upload tag data
        uses: actions/upload-artifact@v4
        with:
          name: 'docker'
          path: 'docker'
          retention-days: 1

  tomee:
    runs-on: ubuntu-latest
    steps:
      - name: Fetch data about the repository
        run: curl -L -o tomee.repository.json -s 'https://hub.docker.com/v2/repositories/library/tomee'
      - name: Fetch data about the tag
        run: curl -L -o tomee.tag.json -s 'https://hub.docker.com/v2/repositories/library/tomee/tags/latest'
      - name: Pull image
        run: docker pull tomee:latest
      - name: Create report
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'tomee:latest'
          format: 'json'
          output: 'tomee.report.json'
          scanners: 'vuln,secret,config'
      - name: Upload scan report
        uses: actions/upload-artifact@v4
        with:
          name: 'tomee.report.json'
          path: 'tomee.report.json'
          retention-days: 1
      - name: Upload repository data
        uses: actions/upload-artifact@v4
        with:
          name: 'tomee.repository.json'
          path: 'tomee.repository.json'
          retention-days: 1
      - name: Upload tag data
        uses: actions/upload-artifact@v4
        with:
          name: 'tomee'
          path: 'tomee'
          retention-days: 1

  sourcemage:
    runs-on: ubuntu-latest
    steps:
      - name: Fetch data about the repository
        run: curl -L -o sourcemage.repository.json -s 'https://hub.docker.com/v2/repositories/library/sourcemage'
      - name: Fetch data about the tag
        run: curl -L -o sourcemage.tag.json -s 'https://hub.docker.com/v2/repositories/library/sourcemage/tags/latest'
      - name: Pull image
        run: docker pull sourcemage:latest
      - name: Create report
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'sourcemage:latest'
          format: 'json'
          output: 'sourcemage.report.json'
          scanners: 'vuln,secret,config'
      - name: Upload scan report
        uses: actions/upload-artifact@v4
        with:
          name: 'sourcemage.report.json'
          path: 'sourcemage.report.json'
          retention-days: 1
      - name: Upload repository data
        uses: actions/upload-artifact@v4
        with:
          name: 'sourcemage.repository.json'
          path: 'sourcemage.repository.json'
          retention-days: 1
      - name: Upload tag data
        uses: actions/upload-artifact@v4
        with:
          name: 'sourcemage'
          path: 'sourcemage'
          retention-days: 1

  bonita:
    runs-on: ubuntu-latest
    steps:
      - name: Fetch data about the repository
        run: curl -L -o bonita.repository.json -s 'https://hub.docker.com/v2/repositories/library/bonita'
      - name: Fetch data about the tag
        run: curl -L -o bonita.tag.json -s 'https://hub.docker.com/v2/repositories/library/bonita/tags/latest'
      - name: Pull image
        run: docker pull bonita:latest
      - name: Create report
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'bonita:latest'
          format: 'json'
          output: 'bonita.report.json'
          scanners: 'vuln,secret,config'
      - name: Upload scan report
        uses: actions/upload-artifact@v4
        with:
          name: 'bonita.report.json'
          path: 'bonita.report.json'
          retention-days: 1
      - name: Upload repository data
        uses: actions/upload-artifact@v4
        with:
          name: 'bonita.repository.json'
          path: 'bonita.repository.json'
          retention-days: 1
      - name: Upload tag data
        uses: actions/upload-artifact@v4
        with:
          name: 'bonita'
          path: 'bonita'
          retention-days: 1

  solr:
    runs-on: ubuntu-latest
    steps:
      - name: Fetch data about the repository
        run: curl -L -o solr.repository.json -s 'https://hub.docker.com/v2/repositories/library/solr'
      - name: Fetch data about the tag
        run: curl -L -o solr.tag.json -s 'https://hub.docker.com/v2/repositories/library/solr/tags/latest'
      - name: Pull image
        run: docker pull solr:latest
      - name: Create report
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'solr:latest'
          format: 'json'
          output: 'solr.report.json'
          scanners: 'vuln,secret,config'
      - name: Upload scan report
        uses: actions/upload-artifact@v4
        with:
          name: 'solr.report.json'
          path: 'solr.report.json'
          retention-days: 1
      - name: Upload repository data
        uses: actions/upload-artifact@v4
        with:
          name: 'solr.repository.json'
          path: 'solr.repository.json'
          retention-days: 1
      - name: Upload tag data
        uses: actions/upload-artifact@v4
        with:
          name: 'solr'
          path: 'solr'
          retention-days: 1

  neo4j:
    runs-on: ubuntu-latest
    steps:
      - name: Fetch data about the repository
        run: curl -L -o neo4j.repository.json -s 'https://hub.docker.com/v2/repositories/library/neo4j'
      - name: Fetch data about the tag
        run: curl -L -o neo4j.tag.json -s 'https://hub.docker.com/v2/repositories/library/neo4j/tags/latest'
      - name: Pull image
        run: docker pull neo4j:latest
      - name: Create report
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'neo4j:latest'
          format: 'json'
          output: 'neo4j.report.json'
          scanners: 'vuln,secret,config'
      - name: Upload scan report
        uses: actions/upload-artifact@v4
        with:
          name: 'neo4j.report.json'
          path: 'neo4j.report.json'
          retention-days: 1
      - name: Upload repository data
        uses: actions/upload-artifact@v4
        with:
          name: 'neo4j.repository.json'
          path: 'neo4j.repository.json'
          retention-days: 1
      - name: Upload tag data
        uses: actions/upload-artifact@v4
        with:
          name: 'neo4j'
          path: 'neo4j'
          retention-days: 1

  erlang:
    runs-on: ubuntu-latest
    steps:
      - name: Fetch data about the repository
        run: curl -L -o erlang.repository.json -s 'https://hub.docker.com/v2/repositories/library/erlang'
      - name: Fetch data about the tag
        run: curl -L -o erlang.tag.json -s 'https://hub.docker.com/v2/repositories/library/erlang/tags/latest'
      - name: Pull image
        run: docker pull erlang:latest
      - name: Create report
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'erlang:latest'
          format: 'json'
          output: 'erlang.report.json'
          scanners: 'vuln,secret,config'
      - name: Upload scan report
        uses: actions/upload-artifact@v4
        with:
          name: 'erlang.report.json'
          path: 'erlang.report.json'
          retention-days: 1
      - name: Upload repository data
        uses: actions/upload-artifact@v4
        with:
          name: 'erlang.repository.json'
          path: 'erlang.repository.json'
          retention-days: 1
      - name: Upload tag data
        uses: actions/upload-artifact@v4
        with:
          name: 'erlang'
          path: 'erlang'
          retention-days: 1

  nuxeo:
    runs-on: ubuntu-latest
    steps:
      - name: Fetch data about the repository
        run: curl -L -o nuxeo.repository.json -s 'https://hub.docker.com/v2/repositories/library/nuxeo'
      - name: Fetch data about the tag
        run: curl -L -o nuxeo.tag.json -s 'https://hub.docker.com/v2/repositories/library/nuxeo/tags/latest'
      - name: Pull image
        run: docker pull nuxeo:latest
      - name: Create report
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'nuxeo:latest'
          format: 'json'
          output: 'nuxeo.report.json'
          scanners: 'vuln,secret,config'
      - name: Upload scan report
        uses: actions/upload-artifact@v4
        with:
          name: 'nuxeo.report.json'
          path: 'nuxeo.report.json'
          retention-days: 1
      - name: Upload repository data
        uses: actions/upload-artifact@v4
        with:
          name: 'nuxeo.repository.json'
          path: 'nuxeo.repository.json'
          retention-days: 1
      - name: Upload tag data
        uses: actions/upload-artifact@v4
        with:
          name: 'nuxeo'
          path: 'nuxeo'
          retention-days: 1

  photon:
    runs-on: ubuntu-latest
    steps:
      - name: Fetch data about the repository
        run: curl -L -o photon.repository.json -s 'https://hub.docker.com/v2/repositories/library/photon'
      - name: Fetch data about the tag
        run: curl -L -o photon.tag.json -s 'https://hub.docker.com/v2/repositories/library/photon/tags/latest'
      - name: Pull image
        run: docker pull photon:latest
      - name: Create report
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'photon:latest'
          format: 'json'
          output: 'photon.report.json'
          scanners: 'vuln,secret,config'
      - name: Upload scan report
        uses: actions/upload-artifact@v4
        with:
          name: 'photon.report.json'
          path: 'photon.report.json'
          retention-days: 1
      - name: Upload repository data
        uses: actions/upload-artifact@v4
        with:
          name: 'photon.repository.json'
          path: 'photon.repository.json'
          retention-days: 1
      - name: Upload tag data
        uses: actions/upload-artifact@v4
        with:
          name: 'photon'
          path: 'photon'
          retention-days: 1

  couchdb:
    runs-on: ubuntu-latest
    steps:
      - name: Fetch data about the repository
        run: curl -L -o couchdb.repository.json -s 'https://hub.docker.com/v2/repositories/library/couchdb'
      - name: Fetch data about the tag
        run: curl -L -o couchdb.tag.json -s 'https://hub.docker.com/v2/repositories/library/couchdb/tags/latest'
      - name: Pull image
        run: docker pull couchdb:latest
      - name: Create report
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'couchdb:latest'
          format: 'json'
          output: 'couchdb.report.json'
          scanners: 'vuln,secret,config'
      - name: Upload scan report
        uses: actions/upload-artifact@v4
        with:
          name: 'couchdb.report.json'
          path: 'couchdb.report.json'
          retention-days: 1
      - name: Upload repository data
        uses: actions/upload-artifact@v4
        with:
          name: 'couchdb.repository.json'
          path: 'couchdb.repository.json'
          retention-days: 1
      - name: Upload tag data
        uses: actions/upload-artifact@v4
        with:
          name: 'couchdb'
          path: 'couchdb'
          retention-days: 1

  notary:
    runs-on: ubuntu-latest
    steps:
      - name: Fetch data about the repository
        run: curl -L -o notary.repository.json -s 'https://hub.docker.com/v2/repositories/library/notary'
      - name: Fetch data about the tag
        run: curl -L -o notary.tag.json -s 'https://hub.docker.com/v2/repositories/library/notary/tags/signer-0.7.0'
      - name: Pull image
        run: docker pull notary:signer-0.7.0
      - name: Create report
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'notary:signer-0.7.0'
          format: 'json'
          output: 'notary.report.json'
          scanners: 'vuln,secret,config'
      - name: Upload scan report
        uses: actions/upload-artifact@v4
        with:
          name: 'notary.report.json'
          path: 'notary.report.json'
          retention-days: 1
      - name: Upload repository data
        uses: actions/upload-artifact@v4
        with:
          name: 'notary.repository.json'
          path: 'notary.repository.json'
          retention-days: 1
      - name: Upload tag data
        uses: actions/upload-artifact@v4
        with:
          name: 'notary'
          path: 'notary'
          retention-days: 1

  piwik:
    runs-on: ubuntu-latest
    steps:
      - name: Fetch data about the repository
        run: curl -L -o piwik.repository.json -s 'https://hub.docker.com/v2/repositories/library/piwik'
      - name: Fetch data about the tag
        run: curl -L -o piwik.tag.json -s 'https://hub.docker.com/v2/repositories/library/piwik/tags/latest'
      - name: Pull image
        run: docker pull piwik:latest
      - name: Create report
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'piwik:latest'
          format: 'json'
          output: 'piwik.report.json'
          scanners: 'vuln,secret,config'
      - name: Upload scan report
        uses: actions/upload-artifact@v4
        with:
          name: 'piwik.report.json'
          path: 'piwik.report.json'
          retention-days: 1
      - name: Upload repository data
        uses: actions/upload-artifact@v4
        with:
          name: 'piwik.repository.json'
          path: 'piwik.repository.json'
          retention-days: 1
      - name: Upload tag data
        uses: actions/upload-artifact@v4
        with:
          name: 'piwik'
          path: 'piwik'
          retention-days: 1

  elixir:
    runs-on: ubuntu-latest
    steps:
      - name: Fetch data about the repository
        run: curl -L -o elixir.repository.json -s 'https://hub.docker.com/v2/repositories/library/elixir'
      - name: Fetch data about the tag
        run: curl -L -o elixir.tag.json -s 'https://hub.docker.com/v2/repositories/library/elixir/tags/latest'
      - name: Pull image
        run: docker pull elixir:latest
      - name: Create report
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'elixir:latest'
          format: 'json'
          output: 'elixir.report.json'
          scanners: 'vuln,secret,config'
      - name: Upload scan report
        uses: actions/upload-artifact@v4
        with:
          name: 'elixir.report.json'
          path: 'elixir.report.json'
          retention-days: 1
      - name: Upload repository data
        uses: actions/upload-artifact@v4
        with:
          name: 'elixir.repository.json'
          path: 'elixir.repository.json'
          retention-days: 1
      - name: Upload tag data
        uses: actions/upload-artifact@v4
        with:
          name: 'elixir'
          path: 'elixir'
          retention-days: 1

  lightstreamer:
    runs-on: ubuntu-latest
    steps:
      - name: Fetch data about the repository
        run: curl -L -o lightstreamer.repository.json -s 'https://hub.docker.com/v2/repositories/library/lightstreamer'
      - name: Fetch data about the tag
        run: curl -L -o lightstreamer.tag.json -s 'https://hub.docker.com/v2/repositories/library/lightstreamer/tags/latest'
      - name: Pull image
        run: docker pull lightstreamer:latest
      - name: Create report
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'lightstreamer:latest'
          format: 'json'
          output: 'lightstreamer.report.json'
          scanners: 'vuln,secret,config'
      - name: Upload scan report
        uses: actions/upload-artifact@v4
        with:
          name: 'lightstreamer.report.json'
          path: 'lightstreamer.report.json'
          retention-days: 1
      - name: Upload repository data
        uses: actions/upload-artifact@v4
        with:
          name: 'lightstreamer.repository.json'
          path: 'lightstreamer.repository.json'
          retention-days: 1
      - name: Upload tag data
        uses: actions/upload-artifact@v4
        with:
          name: 'lightstreamer'
          path: 'lightstreamer'
          retention-days: 1

  orientdb:
    runs-on: ubuntu-latest
    steps:
      - name: Fetch data about the repository
        run: curl -L -o orientdb.repository.json -s 'https://hub.docker.com/v2/repositories/library/orientdb'
      - name: Fetch data about the tag
        run: curl -L -o orientdb.tag.json -s 'https://hub.docker.com/v2/repositories/library/orientdb/tags/latest'
      - name: Pull image
        run: docker pull orientdb:latest
      - name: Create report
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'orientdb:latest'
          format: 'json'
          output: 'orientdb.report.json'
          scanners: 'vuln,secret,config'
      - name: Upload scan report
        uses: actions/upload-artifact@v4
        with:
          name: 'orientdb.report.json'
          path: 'orientdb.report.json'
          retention-days: 1
      - name: Upload repository data
        uses: actions/upload-artifact@v4
        with:
          name: 'orientdb.repository.json'
          path: 'orientdb.repository.json'
          retention-days: 1
      - name: Upload tag data
        uses: actions/upload-artifact@v4
        with:
          name: 'orientdb'
          path: 'orientdb'
          retention-days: 1

  mongo-express:
    runs-on: ubuntu-latest
    steps:
      - name: Fetch data about the repository
        run: curl -L -o mongo-express.repository.json -s 'https://hub.docker.com/v2/repositories/library/mongo-express'
      - name: Fetch data about the tag
        run: curl -L -o mongo-express.tag.json -s 'https://hub.docker.com/v2/repositories/library/mongo-express/tags/latest'
      - name: Pull image
        run: docker pull mongo-express:latest
      - name: Create report
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'mongo-express:latest'
          format: 'json'
          output: 'mongo-express.report.json'
          scanners: 'vuln,secret,config'
      - name: Upload scan report
        uses: actions/upload-artifact@v4
        with:
          name: 'mongo-express.report.json'
          path: 'mongo-express.report.json'
          retention-days: 1
      - name: Upload repository data
        uses: actions/upload-artifact@v4
        with:
          name: 'mongo-express.repository.json'
          path: 'mongo-express.repository.json'
          retention-days: 1
      - name: Upload tag data
        uses: actions/upload-artifact@v4
        with:
          name: 'mongo-express'
          path: 'mongo-express'
          retention-days: 1

  traefik:
    runs-on: ubuntu-latest
    steps:
      - name: Fetch data about the repository
        run: curl -L -o traefik.repository.json -s 'https://hub.docker.com/v2/repositories/library/traefik'
      - name: Fetch data about the tag
        run: curl -L -o traefik.tag.json -s 'https://hub.docker.com/v2/repositories/library/traefik/tags/latest'
      - name: Pull image
        run: docker pull traefik:latest
      - name: Create report
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'traefik:latest'
          format: 'json'
          output: 'traefik.report.json'
          scanners: 'vuln,secret,config'
      - name: Upload scan report
        uses: actions/upload-artifact@v4
        with:
          name: 'traefik.report.json'
          path: 'traefik.report.json'
          retention-days: 1
      - name: Upload repository data
        uses: actions/upload-artifact@v4
        with:
          name: 'traefik.repository.json'
          path: 'traefik.repository.json'
          retention-days: 1
      - name: Upload tag data
        uses: actions/upload-artifact@v4
        with:
          name: 'traefik'
          path: 'traefik'
          retention-days: 1

  backdrop:
    runs-on: ubuntu-latest
    steps:
      - name: Fetch data about the repository
        run: curl -L -o backdrop.repository.json -s 'https://hub.docker.com/v2/repositories/library/backdrop'
      - name: Fetch data about the tag
        run: curl -L -o backdrop.tag.json -s 'https://hub.docker.com/v2/repositories/library/backdrop/tags/latest'
      - name: Pull image
        run: docker pull backdrop:latest
      - name: Create report
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'backdrop:latest'
          format: 'json'
          output: 'backdrop.report.json'
          scanners: 'vuln,secret,config'
      - name: Upload scan report
        uses: actions/upload-artifact@v4
        with:
          name: 'backdrop.report.json'
          path: 'backdrop.report.json'
          retention-days: 1
      - name: Upload repository data
        uses: actions/upload-artifact@v4
        with:
          name: 'backdrop.repository.json'
          path: 'backdrop.repository.json'
          retention-days: 1
      - name: Upload tag data
        uses: actions/upload-artifact@v4
        with:
          name: 'backdrop'
          path: 'backdrop'
          retention-days: 1

  consul:
    runs-on: ubuntu-latest
    steps:
      - name: Fetch data about the repository
        run: curl -L -o consul.repository.json -s 'https://hub.docker.com/v2/repositories/library/consul'
      - name: Fetch data about the tag
        run: curl -L -o consul.tag.json -s 'https://hub.docker.com/v2/repositories/library/consul/tags/1.15.4'
      - name: Pull image
        run: docker pull consul:1.15.4
      - name: Create report
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'consul:1.15.4'
          format: 'json'
          output: 'consul.report.json'
          scanners: 'vuln,secret,config'
      - name: Upload scan report
        uses: actions/upload-artifact@v4
        with:
          name: 'consul.report.json'
          path: 'consul.report.json'
          retention-days: 1
      - name: Upload repository data
        uses: actions/upload-artifact@v4
        with:
          name: 'consul.repository.json'
          path: 'consul.repository.json'
          retention-days: 1
      - name: Upload tag data
        uses: actions/upload-artifact@v4
        with:
          name: 'consul'
          path: 'consul'
          retention-days: 1

  chronograf:
    runs-on: ubuntu-latest
    steps:
      - name: Fetch data about the repository
        run: curl -L -o chronograf.repository.json -s 'https://hub.docker.com/v2/repositories/library/chronograf'
      - name: Fetch data about the tag
        run: curl -L -o chronograf.tag.json -s 'https://hub.docker.com/v2/repositories/library/chronograf/tags/latest'
      - name: Pull image
        run: docker pull chronograf:latest
      - name: Create report
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'chronograf:latest'
          format: 'json'
          output: 'chronograf.report.json'
          scanners: 'vuln,secret,config'
      - name: Upload scan report
        uses: actions/upload-artifact@v4
        with:
          name: 'chronograf.report.json'
          path: 'chronograf.report.json'
          retention-days: 1
      - name: Upload repository data
        uses: actions/upload-artifact@v4
        with:
          name: 'chronograf.repository.json'
          path: 'chronograf.repository.json'
          retention-days: 1
      - name: Upload tag data
        uses: actions/upload-artifact@v4
        with:
          name: 'chronograf'
          path: 'chronograf'
          retention-days: 1

  influxdb:
    runs-on: ubuntu-latest
    steps:
      - name: Fetch data about the repository
        run: curl -L -o influxdb.repository.json -s 'https://hub.docker.com/v2/repositories/library/influxdb'
      - name: Fetch data about the tag
        run: curl -L -o influxdb.tag.json -s 'https://hub.docker.com/v2/repositories/library/influxdb/tags/latest'
      - name: Pull image
        run: docker pull influxdb:latest
      - name: Create report
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'influxdb:latest'
          format: 'json'
          output: 'influxdb.report.json'
          scanners: 'vuln,secret,config'
      - name: Upload scan report
        uses: actions/upload-artifact@v4
        with:
          name: 'influxdb.report.json'
          path: 'influxdb.report.json'
          retention-days: 1
      - name: Upload repository data
        uses: actions/upload-artifact@v4
        with:
          name: 'influxdb.repository.json'
          path: 'influxdb.repository.json'
          retention-days: 1
      - name: Upload tag data
        uses: actions/upload-artifact@v4
        with:
          name: 'influxdb'
          path: 'influxdb'
          retention-days: 1

  kapacitor:
    runs-on: ubuntu-latest
    steps:
      - name: Fetch data about the repository
        run: curl -L -o kapacitor.repository.json -s 'https://hub.docker.com/v2/repositories/library/kapacitor'
      - name: Fetch data about the tag
        run: curl -L -o kapacitor.tag.json -s 'https://hub.docker.com/v2/repositories/library/kapacitor/tags/latest'
      - name: Pull image
        run: docker pull kapacitor:latest
      - name: Create report
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'kapacitor:latest'
          format: 'json'
          output: 'kapacitor.report.json'
          scanners: 'vuln,secret,config'
      - name: Upload scan report
        uses: actions/upload-artifact@v4
        with:
          name: 'kapacitor.report.json'
          path: 'kapacitor.report.json'
          retention-days: 1
      - name: Upload repository data
        uses: actions/upload-artifact@v4
        with:
          name: 'kapacitor.repository.json'
          path: 'kapacitor.repository.json'
          retention-days: 1
      - name: Upload tag data
        uses: actions/upload-artifact@v4
        with:
          name: 'kapacitor'
          path: 'kapacitor'
          retention-days: 1

  telegraf:
    runs-on: ubuntu-latest
    steps:
      - name: Fetch data about the repository
        run: curl -L -o telegraf.repository.json -s 'https://hub.docker.com/v2/repositories/library/telegraf'
      - name: Fetch data about the tag
        run: curl -L -o telegraf.tag.json -s 'https://hub.docker.com/v2/repositories/library/telegraf/tags/latest'
      - name: Pull image
        run: docker pull telegraf:latest
      - name: Create report
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'telegraf:latest'
          format: 'json'
          output: 'telegraf.report.json'
          scanners: 'vuln,secret,config'
      - name: Upload scan report
        uses: actions/upload-artifact@v4
        with:
          name: 'telegraf.report.json'
          path: 'telegraf.report.json'
          retention-days: 1
      - name: Upload repository data
        uses: actions/upload-artifact@v4
        with:
          name: 'telegraf.repository.json'
          path: 'telegraf.repository.json'
          retention-days: 1
      - name: Upload tag data
        uses: actions/upload-artifact@v4
        with:
          name: 'telegraf'
          path: 'telegraf'
          retention-days: 1

  hello-seattle:
    runs-on: ubuntu-latest
    steps:
      - name: Fetch data about the repository
        run: curl -L -o hello-seattle.repository.json -s 'https://hub.docker.com/v2/repositories/library/hello-seattle'
      - name: Fetch data about the tag
        run: curl -L -o hello-seattle.tag.json -s 'https://hub.docker.com/v2/repositories/library/hello-seattle/tags/latest'
      - name: Pull image
        run: docker pull hello-seattle:latest
      - name: Create report
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'hello-seattle:latest'
          format: 'json'
          output: 'hello-seattle.report.json'
          scanners: 'vuln,secret,config'
      - name: Upload scan report
        uses: actions/upload-artifact@v4
        with:
          name: 'hello-seattle.report.json'
          path: 'hello-seattle.report.json'
          retention-days: 1
      - name: Upload repository data
        uses: actions/upload-artifact@v4
        with:
          name: 'hello-seattle.repository.json'
          path: 'hello-seattle.repository.json'
          retention-days: 1
      - name: Upload tag data
        uses: actions/upload-artifact@v4
        with:
          name: 'hello-seattle'
          path: 'hello-seattle'
          retention-days: 1

  hola-mundo:
    runs-on: ubuntu-latest
    steps:
      - name: Fetch data about the repository
        run: curl -L -o hola-mundo.repository.json -s 'https://hub.docker.com/v2/repositories/library/hola-mundo'
      - name: Fetch data about the tag
        run: curl -L -o hola-mundo.tag.json -s 'https://hub.docker.com/v2/repositories/library/hola-mundo/tags/latest'
      - name: Pull image
        run: docker pull hola-mundo:latest
      - name: Create report
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'hola-mundo:latest'
          format: 'json'
          output: 'hola-mundo.report.json'
          scanners: 'vuln,secret,config'
      - name: Upload scan report
        uses: actions/upload-artifact@v4
        with:
          name: 'hola-mundo.report.json'
          path: 'hola-mundo.report.json'
          retention-days: 1
      - name: Upload repository data
        uses: actions/upload-artifact@v4
        with:
          name: 'hola-mundo.repository.json'
          path: 'hola-mundo.repository.json'
          retention-days: 1
      - name: Upload tag data
        uses: actions/upload-artifact@v4
        with:
          name: 'hola-mundo'
          path: 'hola-mundo'
          retention-days: 1

  fsharp:
    runs-on: ubuntu-latest
    steps:
      - name: Fetch data about the repository
        run: curl -L -o fsharp.repository.json -s 'https://hub.docker.com/v2/repositories/library/fsharp'
      - name: Fetch data about the tag
        run: curl -L -o fsharp.tag.json -s 'https://hub.docker.com/v2/repositories/library/fsharp/tags/latest'
      - name: Pull image
        run: docker pull fsharp:latest
      - name: Create report
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'fsharp:latest'
          format: 'json'
          output: 'fsharp.report.json'
          scanners: 'vuln,secret,config'
      - name: Upload scan report
        uses: actions/upload-artifact@v4
        with:
          name: 'fsharp.report.json'
          path: 'fsharp.report.json'
          retention-days: 1
      - name: Upload repository data
        uses: actions/upload-artifact@v4
        with:
          name: 'fsharp.repository.json'
          path: 'fsharp.repository.json'
          retention-days: 1
      - name: Upload tag data
        uses: actions/upload-artifact@v4
        with:
          name: 'fsharp'
          path: 'fsharp'
          retention-days: 1

  spiped:
    runs-on: ubuntu-latest
    steps:
      - name: Fetch data about the repository
        run: curl -L -o spiped.repository.json -s 'https://hub.docker.com/v2/repositories/library/spiped'
      - name: Fetch data about the tag
        run: curl -L -o spiped.tag.json -s 'https://hub.docker.com/v2/repositories/library/spiped/tags/latest'
      - name: Pull image
        run: docker pull spiped:latest
      - name: Create report
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'spiped:latest'
          format: 'json'
          output: 'spiped.report.json'
          scanners: 'vuln,secret,config'
      - name: Upload scan report
        uses: actions/upload-artifact@v4
        with:
          name: 'spiped.report.json'
          path: 'spiped.report.json'
          retention-days: 1
      - name: Upload repository data
        uses: actions/upload-artifact@v4
        with:
          name: 'spiped.repository.json'
          path: 'spiped.repository.json'
          retention-days: 1
      - name: Upload tag data
        uses: actions/upload-artifact@v4
        with:
          name: 'spiped'
          path: 'spiped'
          retention-days: 1

  vault:
    runs-on: ubuntu-latest
    steps:
      - name: Fetch data about the repository
        run: curl -L -o vault.repository.json -s 'https://hub.docker.com/v2/repositories/library/vault'
      - name: Fetch data about the tag
        run: curl -L -o vault.tag.json -s 'https://hub.docker.com/v2/repositories/library/vault/tags/1.13.3'
      - name: Pull image
        run: docker pull vault:1.13.3
      - name: Create report
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'vault:1.13.3'
          format: 'json'
          output: 'vault.report.json'
          scanners: 'vuln,secret,config'
      - name: Upload scan report
        uses: actions/upload-artifact@v4
        with:
          name: 'vault.report.json'
          path: 'vault.report.json'
          retention-days: 1
      - name: Upload repository data
        uses: actions/upload-artifact@v4
        with:
          name: 'vault.repository.json'
          path: 'vault.repository.json'
          retention-days: 1
      - name: Upload tag data
        uses: actions/upload-artifact@v4
        with:
          name: 'vault'
          path: 'vault'
          retention-days: 1

  clearlinux:
    runs-on: ubuntu-latest
    steps:
      - name: Fetch data about the repository
        run: curl -L -o clearlinux.repository.json -s 'https://hub.docker.com/v2/repositories/library/clearlinux'
      - name: Fetch data about the tag
        run: curl -L -o clearlinux.tag.json -s 'https://hub.docker.com/v2/repositories/library/clearlinux/tags/latest'
      - name: Pull image
        run: docker pull clearlinux:latest
      - name: Create report
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'clearlinux:latest'
          format: 'json'
          output: 'clearlinux.report.json'
          scanners: 'vuln,secret,config'
      - name: Upload scan report
        uses: actions/upload-artifact@v4
        with:
          name: 'clearlinux.report.json'
          path: 'clearlinux.report.json'
          retention-days: 1
      - name: Upload repository data
        uses: actions/upload-artifact@v4
        with:
          name: 'clearlinux.repository.json'
          path: 'clearlinux.repository.json'
          retention-days: 1
      - name: Upload tag data
        uses: actions/upload-artifact@v4
        with:
          name: 'clearlinux'
          path: 'clearlinux'
          retention-days: 1

  eggdrop:
    runs-on: ubuntu-latest
    steps:
      - name: Fetch data about the repository
        run: curl -L -o eggdrop.repository.json -s 'https://hub.docker.com/v2/repositories/library/eggdrop'
      - name: Fetch data about the tag
        run: curl -L -o eggdrop.tag.json -s 'https://hub.docker.com/v2/repositories/library/eggdrop/tags/latest'
      - name: Pull image
        run: docker pull eggdrop:latest
      - name: Create report
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'eggdrop:latest'
          format: 'json'
          output: 'eggdrop.report.json'
          scanners: 'vuln,secret,config'
      - name: Upload scan report
        uses: actions/upload-artifact@v4
        with:
          name: 'eggdrop.report.json'
          path: 'eggdrop.report.json'
          retention-days: 1
      - name: Upload repository data
        uses: actions/upload-artifact@v4
        with:
          name: 'eggdrop.repository.json'
          path: 'eggdrop.repository.json'
          retention-days: 1
      - name: Upload tag data
        uses: actions/upload-artifact@v4
        with:
          name: 'eggdrop'
          path: 'eggdrop'
          retention-days: 1

  ibmjava:
    runs-on: ubuntu-latest
    steps:
      - name: Fetch data about the repository
        run: curl -L -o ibmjava.repository.json -s 'https://hub.docker.com/v2/repositories/library/ibmjava'
      - name: Fetch data about the tag
        run: curl -L -o ibmjava.tag.json -s 'https://hub.docker.com/v2/repositories/library/ibmjava/tags/latest'
      - name: Pull image
        run: docker pull ibmjava:latest
      - name: Create report
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'ibmjava:latest'
          format: 'json'
          output: 'ibmjava.report.json'
          scanners: 'vuln,secret,config'
      - name: Upload scan report
        uses: actions/upload-artifact@v4
        with:
          name: 'ibmjava.report.json'
          path: 'ibmjava.report.json'
          retention-days: 1
      - name: Upload repository data
        uses: actions/upload-artifact@v4
        with:
          name: 'ibmjava.repository.json'
          path: 'ibmjava.repository.json'
          retention-days: 1
      - name: Upload tag data
        uses: actions/upload-artifact@v4
        with:
          name: 'ibmjava'
          path: 'ibmjava'
          retention-days: 1

  openjdk:
    runs-on: ubuntu-latest
    steps:
      - name: Fetch data about the repository
        run: curl -L -o openjdk.repository.json -s 'https://hub.docker.com/v2/repositories/library/openjdk'
      - name: Fetch data about the tag
        run: curl -L -o openjdk.tag.json -s 'https://hub.docker.com/v2/repositories/library/openjdk/tags/latest'
      - name: Pull image
        run: docker pull openjdk:latest
      - name: Create report
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'openjdk:latest'
          format: 'json'
          output: 'openjdk.report.json'
          scanners: 'vuln,secret,config'
      - name: Upload scan report
        uses: actions/upload-artifact@v4
        with:
          name: 'openjdk.report.json'
          path: 'openjdk.report.json'
          retention-days: 1
      - name: Upload repository data
        uses: actions/upload-artifact@v4
        with:
          name: 'openjdk.repository.json'
          path: 'openjdk.repository.json'
          retention-days: 1
      - name: Upload tag data
        uses: actions/upload-artifact@v4
        with:
          name: 'openjdk'
          path: 'openjdk'
          retention-days: 1

  kong:
    runs-on: ubuntu-latest
    steps:
      - name: Fetch data about the repository
        run: curl -L -o kong.repository.json -s 'https://hub.docker.com/v2/repositories/library/kong'
      - name: Fetch data about the tag
        run: curl -L -o kong.tag.json -s 'https://hub.docker.com/v2/repositories/library/kong/tags/latest'
      - name: Pull image
        run: docker pull kong:latest
      - name: Create report
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'kong:latest'
          format: 'json'
          output: 'kong.report.json'
          scanners: 'vuln,secret,config'
      - name: Upload scan report
        uses: actions/upload-artifact@v4
        with:
          name: 'kong.report.json'
          path: 'kong.report.json'
          retention-days: 1
      - name: Upload repository data
        uses: actions/upload-artifact@v4
        with:
          name: 'kong.repository.json'
          path: 'kong.repository.json'
          retention-days: 1
      - name: Upload tag data
        uses: actions/upload-artifact@v4
        with:
          name: 'kong'
          path: 'kong'
          retention-days: 1

  zookeeper:
    runs-on: ubuntu-latest
    steps:
      - name: Fetch data about the repository
        run: curl -L -o zookeeper.repository.json -s 'https://hub.docker.com/v2/repositories/library/zookeeper'
      - name: Fetch data about the tag
        run: curl -L -o zookeeper.tag.json -s 'https://hub.docker.com/v2/repositories/library/zookeeper/tags/latest'
      - name: Pull image
        run: docker pull zookeeper:latest
      - name: Create report
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'zookeeper:latest'
          format: 'json'
          output: 'zookeeper.report.json'
          scanners: 'vuln,secret,config'
      - name: Upload scan report
        uses: actions/upload-artifact@v4
        with:
          name: 'zookeeper.report.json'
          path: 'zookeeper.report.json'
          retention-days: 1
      - name: Upload repository data
        uses: actions/upload-artifact@v4
        with:
          name: 'zookeeper.repository.json'
          path: 'zookeeper.repository.json'
          retention-days: 1
      - name: Upload tag data
        uses: actions/upload-artifact@v4
        with:
          name: 'zookeeper'
          path: 'zookeeper'
          retention-days: 1

  nats-streaming:
    runs-on: ubuntu-latest
    steps:
      - name: Fetch data about the repository
        run: curl -L -o nats-streaming.repository.json -s 'https://hub.docker.com/v2/repositories/library/nats-streaming'
      - name: Fetch data about the tag
        run: curl -L -o nats-streaming.tag.json -s 'https://hub.docker.com/v2/repositories/library/nats-streaming/tags/latest'
      - name: Pull image
        run: docker pull nats-streaming:latest
      - name: Create report
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'nats-streaming:latest'
          format: 'json'
          output: 'nats-streaming.report.json'
          scanners: 'vuln,secret,config'
      - name: Upload scan report
        uses: actions/upload-artifact@v4
        with:
          name: 'nats-streaming.report.json'
          path: 'nats-streaming.report.json'
          retention-days: 1
      - name: Upload repository data
        uses: actions/upload-artifact@v4
        with:
          name: 'nats-streaming.repository.json'
          path: 'nats-streaming.repository.json'
          retention-days: 1
      - name: Upload tag data
        uses: actions/upload-artifact@v4
        with:
          name: 'nats-streaming'
          path: 'nats-streaming'
          retention-days: 1

  storm:
    runs-on: ubuntu-latest
    steps:
      - name: Fetch data about the repository
        run: curl -L -o storm.repository.json -s 'https://hub.docker.com/v2/repositories/library/storm'
      - name: Fetch data about the tag
        run: curl -L -o storm.tag.json -s 'https://hub.docker.com/v2/repositories/library/storm/tags/latest'
      - name: Pull image
        run: docker pull storm:latest
      - name: Create report
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'storm:latest'
          format: 'json'
          output: 'storm.report.json'
          scanners: 'vuln,secret,config'
      - name: Upload scan report
        uses: actions/upload-artifact@v4
        with:
          name: 'storm.report.json'
          path: 'storm.report.json'
          retention-days: 1
      - name: Upload repository data
        uses: actions/upload-artifact@v4
        with:
          name: 'storm.repository.json'
          path: 'storm.repository.json'
          retention-days: 1
      - name: Upload tag data
        uses: actions/upload-artifact@v4
        with:
          name: 'storm'
          path: 'storm'
          retention-days: 1

  plone:
    runs-on: ubuntu-latest
    steps:
      - name: Fetch data about the repository
        run: curl -L -o plone.repository.json -s 'https://hub.docker.com/v2/repositories/library/plone'
      - name: Fetch data about the tag
        run: curl -L -o plone.tag.json -s 'https://hub.docker.com/v2/repositories/library/plone/tags/latest'
      - name: Pull image
        run: docker pull plone:latest
      - name: Create report
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'plone:latest'
          format: 'json'
          output: 'plone.report.json'
          scanners: 'vuln,secret,config'
      - name: Upload scan report
        uses: actions/upload-artifact@v4
        with:
          name: 'plone.report.json'
          path: 'plone.report.json'
          retention-days: 1
      - name: Upload repository data
        uses: actions/upload-artifact@v4
        with:
          name: 'plone.repository.json'
          path: 'plone.repository.json'
          retention-days: 1
      - name: Upload tag data
        uses: actions/upload-artifact@v4
        with:
          name: 'plone'
          path: 'plone'
          retention-days: 1

  bash:
    runs-on: ubuntu-latest
    steps:
      - name: Fetch data about the repository
        run: curl -L -o bash.repository.json -s 'https://hub.docker.com/v2/repositories/library/bash'
      - name: Fetch data about the tag
        run: curl -L -o bash.tag.json -s 'https://hub.docker.com/v2/repositories/library/bash/tags/latest'
      - name: Pull image
        run: docker pull bash:latest
      - name: Create report
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'bash:latest'
          format: 'json'
          output: 'bash.report.json'
          scanners: 'vuln,secret,config'
      - name: Upload scan report
        uses: actions/upload-artifact@v4
        with:
          name: 'bash.report.json'
          path: 'bash.report.json'
          retention-days: 1
      - name: Upload repository data
        uses: actions/upload-artifact@v4
        with:
          name: 'bash.repository.json'
          path: 'bash.repository.json'
          retention-days: 1
      - name: Upload tag data
        uses: actions/upload-artifact@v4
        with:
          name: 'bash'
          path: 'bash'
          retention-days: 1

  amazonlinux:
    runs-on: ubuntu-latest
    steps:
      - name: Fetch data about the repository
        run: curl -L -o amazonlinux.repository.json -s 'https://hub.docker.com/v2/repositories/library/amazonlinux'
      - name: Fetch data about the tag
        run: curl -L -o amazonlinux.tag.json -s 'https://hub.docker.com/v2/repositories/library/amazonlinux/tags/latest'
      - name: Pull image
        run: docker pull amazonlinux:latest
      - name: Create report
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'amazonlinux:latest'
          format: 'json'
          output: 'amazonlinux.report.json'
          scanners: 'vuln,secret,config'
      - name: Upload scan report
        uses: actions/upload-artifact@v4
        with:
          name: 'amazonlinux.report.json'
          path: 'amazonlinux.report.json'
          retention-days: 1
      - name: Upload repository data
        uses: actions/upload-artifact@v4
        with:
          name: 'amazonlinux.repository.json'
          path: 'amazonlinux.repository.json'
          retention-days: 1
      - name: Upload tag data
        uses: actions/upload-artifact@v4
        with:
          name: 'amazonlinux'
          path: 'amazonlinux'
          retention-days: 1

  composer:
    runs-on: ubuntu-latest
    steps:
      - name: Fetch data about the repository
        run: curl -L -o composer.repository.json -s 'https://hub.docker.com/v2/repositories/library/composer'
      - name: Fetch data about the tag
        run: curl -L -o composer.tag.json -s 'https://hub.docker.com/v2/repositories/library/composer/tags/latest'
      - name: Pull image
        run: docker pull composer:latest
      - name: Create report
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'composer:latest'
          format: 'json'
          output: 'composer.report.json'
          scanners: 'vuln,secret,config'
      - name: Upload scan report
        uses: actions/upload-artifact@v4
        with:
          name: 'composer.report.json'
          path: 'composer.report.json'
          retention-days: 1
      - name: Upload repository data
        uses: actions/upload-artifact@v4
        with:
          name: 'composer.repository.json'
          path: 'composer.repository.json'
          retention-days: 1
      - name: Upload tag data
        uses: actions/upload-artifact@v4
        with:
          name: 'composer'
          path: 'composer'
          retention-days: 1

  known:
    runs-on: ubuntu-latest
    steps:
      - name: Fetch data about the repository
        run: curl -L -o known.repository.json -s 'https://hub.docker.com/v2/repositories/library/known'
      - name: Fetch data about the tag
        run: curl -L -o known.tag.json -s 'https://hub.docker.com/v2/repositories/library/known/tags/latest'
      - name: Pull image
        run: docker pull known:latest
      - name: Create report
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'known:latest'
          format: 'json'
          output: 'known.report.json'
          scanners: 'vuln,secret,config'
      - name: Upload scan report
        uses: actions/upload-artifact@v4
        with:
          name: 'known.report.json'
          path: 'known.report.json'
          retention-days: 1
      - name: Upload repository data
        uses: actions/upload-artifact@v4
        with:
          name: 'known.repository.json'
          path: 'known.repository.json'
          retention-days: 1
      - name: Upload tag data
        uses: actions/upload-artifact@v4
        with:
          name: 'known'
          path: 'known'
          retention-days: 1

  eclipse-mosquitto:
    runs-on: ubuntu-latest
    steps:
      - name: Fetch data about the repository
        run: curl -L -o eclipse-mosquitto.repository.json -s 'https://hub.docker.com/v2/repositories/library/eclipse-mosquitto'
      - name: Fetch data about the tag
        run: curl -L -o eclipse-mosquitto.tag.json -s 'https://hub.docker.com/v2/repositories/library/eclipse-mosquitto/tags/latest'
      - name: Pull image
        run: docker pull eclipse-mosquitto:latest
      - name: Create report
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'eclipse-mosquitto:latest'
          format: 'json'
          output: 'eclipse-mosquitto.report.json'
          scanners: 'vuln,secret,config'
      - name: Upload scan report
        uses: actions/upload-artifact@v4
        with:
          name: 'eclipse-mosquitto.report.json'
          path: 'eclipse-mosquitto.report.json'
          retention-days: 1
      - name: Upload repository data
        uses: actions/upload-artifact@v4
        with:
          name: 'eclipse-mosquitto.repository.json'
          path: 'eclipse-mosquitto.repository.json'
          retention-days: 1
      - name: Upload tag data
        uses: actions/upload-artifact@v4
        with:
          name: 'eclipse-mosquitto'
          path: 'eclipse-mosquitto'
          retention-days: 1

  nextcloud:
    runs-on: ubuntu-latest
    steps:
      - name: Fetch data about the repository
        run: curl -L -o nextcloud.repository.json -s 'https://hub.docker.com/v2/repositories/library/nextcloud'
      - name: Fetch data about the tag
        run: curl -L -o nextcloud.tag.json -s 'https://hub.docker.com/v2/repositories/library/nextcloud/tags/latest'
      - name: Pull image
        run: docker pull nextcloud:latest
      - name: Create report
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'nextcloud:latest'
          format: 'json'
          output: 'nextcloud.report.json'
          scanners: 'vuln,secret,config'
      - name: Upload scan report
        uses: actions/upload-artifact@v4
        with:
          name: 'nextcloud.report.json'
          path: 'nextcloud.report.json'
          retention-days: 1
      - name: Upload repository data
        uses: actions/upload-artifact@v4
        with:
          name: 'nextcloud.repository.json'
          path: 'nextcloud.repository.json'
          retention-days: 1
      - name: Upload tag data
        uses: actions/upload-artifact@v4
        with:
          name: 'nextcloud'
          path: 'nextcloud'
          retention-days: 1

  silverpeas:
    runs-on: ubuntu-latest
    steps:
      - name: Fetch data about the repository
        run: curl -L -o silverpeas.repository.json -s 'https://hub.docker.com/v2/repositories/library/silverpeas'
      - name: Fetch data about the tag
        run: curl -L -o silverpeas.tag.json -s 'https://hub.docker.com/v2/repositories/library/silverpeas/tags/latest'
      - name: Pull image
        run: docker pull silverpeas:latest
      - name: Create report
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'silverpeas:latest'
          format: 'json'
          output: 'silverpeas.report.json'
          scanners: 'vuln,secret,config'
      - name: Upload scan report
        uses: actions/upload-artifact@v4
        with:
          name: 'silverpeas.report.json'
          path: 'silverpeas.report.json'
          retention-days: 1
      - name: Upload repository data
        uses: actions/upload-artifact@v4
        with:
          name: 'silverpeas.repository.json'
          path: 'silverpeas.repository.json'
          retention-days: 1
      - name: Upload tag data
        uses: actions/upload-artifact@v4
        with:
          name: 'silverpeas'
          path: 'silverpeas'
          retention-days: 1

  swift:
    runs-on: ubuntu-latest
    steps:
      - name: Fetch data about the repository
        run: curl -L -o swift.repository.json -s 'https://hub.docker.com/v2/repositories/library/swift'
      - name: Fetch data about the tag
        run: curl -L -o swift.tag.json -s 'https://hub.docker.com/v2/repositories/library/swift/tags/latest'
      - name: Pull image
        run: docker pull swift:latest
      - name: Create report
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'swift:latest'
          format: 'json'
          output: 'swift.report.json'
          scanners: 'vuln,secret,config'
      - name: Upload scan report
        uses: actions/upload-artifact@v4
        with:
          name: 'swift.report.json'
          path: 'swift.report.json'
          retention-days: 1
      - name: Upload repository data
        uses: actions/upload-artifact@v4
        with:
          name: 'swift.repository.json'
          path: 'swift.repository.json'
          retention-days: 1
      - name: Upload tag data
        uses: actions/upload-artifact@v4
        with:
          name: 'swift'
          path: 'swift'
          retention-days: 1

  haxe:
    runs-on: ubuntu-latest
    steps:
      - name: Fetch data about the repository
        run: curl -L -o haxe.repository.json -s 'https://hub.docker.com/v2/repositories/library/haxe'
      - name: Fetch data about the tag
        run: curl -L -o haxe.tag.json -s 'https://hub.docker.com/v2/repositories/library/haxe/tags/latest'
      - name: Pull image
        run: docker pull haxe:latest
      - name: Create report
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'haxe:latest'
          format: 'json'
          output: 'haxe.report.json'
          scanners: 'vuln,secret,config'
      - name: Upload scan report
        uses: actions/upload-artifact@v4
        with:
          name: 'haxe.report.json'
          path: 'haxe.report.json'
          retention-days: 1
      - name: Upload repository data
        uses: actions/upload-artifact@v4
        with:
          name: 'haxe.repository.json'
          path: 'haxe.repository.json'
          retention-days: 1
      - name: Upload tag data
        uses: actions/upload-artifact@v4
        with:
          name: 'haxe'
          path: 'haxe'
          retention-days: 1

  rapidoid:
    runs-on: ubuntu-latest
    steps:
      - name: Fetch data about the repository
        run: curl -L -o rapidoid.repository.json -s 'https://hub.docker.com/v2/repositories/library/rapidoid'
      - name: Fetch data about the tag
        run: curl -L -o rapidoid.tag.json -s 'https://hub.docker.com/v2/repositories/library/rapidoid/tags/latest'
      - name: Pull image
        run: docker pull rapidoid:latest
      - name: Create report
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'rapidoid:latest'
          format: 'json'
          output: 'rapidoid.report.json'
          scanners: 'vuln,secret,config'
      - name: Upload scan report
        uses: actions/upload-artifact@v4
        with:
          name: 'rapidoid.report.json'
          path: 'rapidoid.report.json'
          retention-days: 1
      - name: Upload repository data
        uses: actions/upload-artifact@v4
        with:
          name: 'rapidoid.repository.json'
          path: 'rapidoid.repository.json'
          retention-days: 1
      - name: Upload tag data
        uses: actions/upload-artifact@v4
        with:
          name: 'rapidoid'
          path: 'rapidoid'
          retention-days: 1

  adminer:
    runs-on: ubuntu-latest
    steps:
      - name: Fetch data about the repository
        run: curl -L -o adminer.repository.json -s 'https://hub.docker.com/v2/repositories/library/adminer'
      - name: Fetch data about the tag
        run: curl -L -o adminer.tag.json -s 'https://hub.docker.com/v2/repositories/library/adminer/tags/latest'
      - name: Pull image
        run: docker pull adminer:latest
      - name: Create report
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'adminer:latest'
          format: 'json'
          output: 'adminer.report.json'
          scanners: 'vuln,secret,config'
      - name: Upload scan report
        uses: actions/upload-artifact@v4
        with:
          name: 'adminer.report.json'
          path: 'adminer.report.json'
          retention-days: 1
      - name: Upload repository data
        uses: actions/upload-artifact@v4
        with:
          name: 'adminer.repository.json'
          path: 'adminer.repository.json'
          retention-days: 1
      - name: Upload tag data
        uses: actions/upload-artifact@v4
        with:
          name: 'adminer'
          path: 'adminer'
          retention-days: 1

  geonetwork:
    runs-on: ubuntu-latest
    steps:
      - name: Fetch data about the repository
        run: curl -L -o geonetwork.repository.json -s 'https://hub.docker.com/v2/repositories/library/geonetwork'
      - name: Fetch data about the tag
        run: curl -L -o geonetwork.tag.json -s 'https://hub.docker.com/v2/repositories/library/geonetwork/tags/latest'
      - name: Pull image
        run: docker pull geonetwork:latest
      - name: Create report
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'geonetwork:latest'
          format: 'json'
          output: 'geonetwork.report.json'
          scanners: 'vuln,secret,config'
      - name: Upload scan report
        uses: actions/upload-artifact@v4
        with:
          name: 'geonetwork.report.json'
          path: 'geonetwork.report.json'
          retention-days: 1
      - name: Upload repository data
        uses: actions/upload-artifact@v4
        with:
          name: 'geonetwork.repository.json'
          path: 'geonetwork.repository.json'
          retention-days: 1
      - name: Upload tag data
        uses: actions/upload-artifact@v4
        with:
          name: 'geonetwork'
          path: 'geonetwork'
          retention-days: 1

  xwiki:
    runs-on: ubuntu-latest
    steps:
      - name: Fetch data about the repository
        run: curl -L -o xwiki.repository.json -s 'https://hub.docker.com/v2/repositories/library/xwiki'
      - name: Fetch data about the tag
        run: curl -L -o xwiki.tag.json -s 'https://hub.docker.com/v2/repositories/library/xwiki/tags/latest'
      - name: Pull image
        run: docker pull xwiki:latest
      - name: Create report
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'xwiki:latest'
          format: 'json'
          output: 'xwiki.report.json'
          scanners: 'vuln,secret,config'
      - name: Upload scan report
        uses: actions/upload-artifact@v4
        with:
          name: 'xwiki.report.json'
          path: 'xwiki.report.json'
          retention-days: 1
      - name: Upload repository data
        uses: actions/upload-artifact@v4
        with:
          name: 'xwiki.repository.json'
          path: 'xwiki.repository.json'
          retention-days: 1
      - name: Upload tag data
        uses: actions/upload-artifact@v4
        with:
          name: 'xwiki'
          path: 'xwiki'
          retention-days: 1

  groovy:
    runs-on: ubuntu-latest
    steps:
      - name: Fetch data about the repository
        run: curl -L -o groovy.repository.json -s 'https://hub.docker.com/v2/repositories/library/groovy'
      - name: Fetch data about the tag
        run: curl -L -o groovy.tag.json -s 'https://hub.docker.com/v2/repositories/library/groovy/tags/latest'
      - name: Pull image
        run: docker pull groovy:latest
      - name: Create report
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'groovy:latest'
          format: 'json'
          output: 'groovy.report.json'
          scanners: 'vuln,secret,config'
      - name: Upload scan report
        uses: actions/upload-artifact@v4
        with:
          name: 'groovy.report.json'
          path: 'groovy.report.json'
          retention-days: 1
      - name: Upload repository data
        uses: actions/upload-artifact@v4
        with:
          name: 'groovy.repository.json'
          path: 'groovy.repository.json'
          retention-days: 1
      - name: Upload tag data
        uses: actions/upload-artifact@v4
        with:
          name: 'groovy'
          path: 'groovy'
          retention-days: 1

  znc:
    runs-on: ubuntu-latest
    steps:
      - name: Fetch data about the repository
        run: curl -L -o znc.repository.json -s 'https://hub.docker.com/v2/repositories/library/znc'
      - name: Fetch data about the tag
        run: curl -L -o znc.tag.json -s 'https://hub.docker.com/v2/repositories/library/znc/tags/latest'
      - name: Pull image
        run: docker pull znc:latest
      - name: Create report
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'znc:latest'
          format: 'json'
          output: 'znc.report.json'
          scanners: 'vuln,secret,config'
      - name: Upload scan report
        uses: actions/upload-artifact@v4
        with:
          name: 'znc.report.json'
          path: 'znc.report.json'
          retention-days: 1
      - name: Upload repository data
        uses: actions/upload-artifact@v4
        with:
          name: 'znc.repository.json'
          path: 'znc.repository.json'
          retention-days: 1
      - name: Upload tag data
        uses: actions/upload-artifact@v4
        with:
          name: 'znc'
          path: 'znc'
          retention-days: 1

  gradle:
    runs-on: ubuntu-latest
    steps:
      - name: Fetch data about the repository
        run: curl -L -o gradle.repository.json -s 'https://hub.docker.com/v2/repositories/library/gradle'
      - name: Fetch data about the tag
        run: curl -L -o gradle.tag.json -s 'https://hub.docker.com/v2/repositories/library/gradle/tags/latest'
      - name: Pull image
        run: docker pull gradle:latest
      - name: Create report
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'gradle:latest'
          format: 'json'
          output: 'gradle.report.json'
          scanners: 'vuln,secret,config'
      - name: Upload scan report
        uses: actions/upload-artifact@v4
        with:
          name: 'gradle.report.json'
          path: 'gradle.report.json'
          retention-days: 1
      - name: Upload repository data
        uses: actions/upload-artifact@v4
        with:
          name: 'gradle.repository.json'
          path: 'gradle.repository.json'
          retention-days: 1
      - name: Upload tag data
        uses: actions/upload-artifact@v4
        with:
          name: 'gradle'
          path: 'gradle'
          retention-days: 1

  convertigo:
    runs-on: ubuntu-latest
    steps:
      - name: Fetch data about the repository
        run: curl -L -o convertigo.repository.json -s 'https://hub.docker.com/v2/repositories/library/convertigo'
      - name: Fetch data about the tag
        run: curl -L -o convertigo.tag.json -s 'https://hub.docker.com/v2/repositories/library/convertigo/tags/latest'
      - name: Pull image
        run: docker pull convertigo:latest
      - name: Create report
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'convertigo:latest'
          format: 'json'
          output: 'convertigo.report.json'
          scanners: 'vuln,secret,config'
      - name: Upload scan report
        uses: actions/upload-artifact@v4
        with:
          name: 'convertigo.report.json'
          path: 'convertigo.report.json'
          retention-days: 1
      - name: Upload repository data
        uses: actions/upload-artifact@v4
        with:
          name: 'convertigo.repository.json'
          path: 'convertigo.repository.json'
          retention-days: 1
      - name: Upload tag data
        uses: actions/upload-artifact@v4
        with:
          name: 'convertigo'
          path: 'convertigo'
          retention-days: 1

  flink:
    runs-on: ubuntu-latest
    steps:
      - name: Fetch data about the repository
        run: curl -L -o flink.repository.json -s 'https://hub.docker.com/v2/repositories/library/flink'
      - name: Fetch data about the tag
        run: curl -L -o flink.tag.json -s 'https://hub.docker.com/v2/repositories/library/flink/tags/latest'
      - name: Pull image
        run: docker pull flink:latest
      - name: Create report
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'flink:latest'
          format: 'json'
          output: 'flink.report.json'
          scanners: 'vuln,secret,config'
      - name: Upload scan report
        uses: actions/upload-artifact@v4
        with:
          name: 'flink.report.json'
          path: 'flink.report.json'
          retention-days: 1
      - name: Upload repository data
        uses: actions/upload-artifact@v4
        with:
          name: 'flink.repository.json'
          path: 'flink.repository.json'
          retention-days: 1
      - name: Upload tag data
        uses: actions/upload-artifact@v4
        with:
          name: 'flink'
          path: 'flink'
          retention-days: 1

  swipl:
    runs-on: ubuntu-latest
    steps:
      - name: Fetch data about the repository
        run: curl -L -o swipl.repository.json -s 'https://hub.docker.com/v2/repositories/library/swipl'
      - name: Fetch data about the tag
        run: curl -L -o swipl.tag.json -s 'https://hub.docker.com/v2/repositories/library/swipl/tags/latest'
      - name: Pull image
        run: docker pull swipl:latest
      - name: Create report
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'swipl:latest'
          format: 'json'
          output: 'swipl.report.json'
          scanners: 'vuln,secret,config'
      - name: Upload scan report
        uses: actions/upload-artifact@v4
        with:
          name: 'swipl.report.json'
          path: 'swipl.report.json'
          retention-days: 1
      - name: Upload repository data
        uses: actions/upload-artifact@v4
        with:
          name: 'swipl.repository.json'
          path: 'swipl.repository.json'
          retention-days: 1
      - name: Upload tag data
        uses: actions/upload-artifact@v4
        with:
          name: 'swipl'
          path: 'swipl'
          retention-days: 1

  rust:
    runs-on: ubuntu-latest
    steps:
      - name: Fetch data about the repository
        run: curl -L -o rust.repository.json -s 'https://hub.docker.com/v2/repositories/library/rust'
      - name: Fetch data about the tag
        run: curl -L -o rust.tag.json -s 'https://hub.docker.com/v2/repositories/library/rust/tags/latest'
      - name: Pull image
        run: docker pull rust:latest
      - name: Create report
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'rust:latest'
          format: 'json'
          output: 'rust.report.json'
          scanners: 'vuln,secret,config'
      - name: Upload scan report
        uses: actions/upload-artifact@v4
        with:
          name: 'rust.report.json'
          path: 'rust.report.json'
          retention-days: 1
      - name: Upload repository data
        uses: actions/upload-artifact@v4
        with:
          name: 'rust.repository.json'
          path: 'rust.repository.json'
          retention-days: 1
      - name: Upload tag data
        uses: actions/upload-artifact@v4
        with:
          name: 'rust'
          path: 'rust'
          retention-days: 1

  mediawiki:
    runs-on: ubuntu-latest
    steps:
      - name: Fetch data about the repository
        run: curl -L -o mediawiki.repository.json -s 'https://hub.docker.com/v2/repositories/library/mediawiki'
      - name: Fetch data about the tag
        run: curl -L -o mediawiki.tag.json -s 'https://hub.docker.com/v2/repositories/library/mediawiki/tags/latest'
      - name: Pull image
        run: docker pull mediawiki:latest
      - name: Create report
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'mediawiki:latest'
          format: 'json'
          output: 'mediawiki.report.json'
          scanners: 'vuln,secret,config'
      - name: Upload scan report
        uses: actions/upload-artifact@v4
        with:
          name: 'mediawiki.report.json'
          path: 'mediawiki.report.json'
          retention-days: 1
      - name: Upload repository data
        uses: actions/upload-artifact@v4
        with:
          name: 'mediawiki.repository.json'
          path: 'mediawiki.repository.json'
          retention-days: 1
      - name: Upload tag data
        uses: actions/upload-artifact@v4
        with:
          name: 'mediawiki'
          path: 'mediawiki'
          retention-days: 1

  euleros:
    runs-on: ubuntu-latest
    steps:
      - name: Fetch data about the repository
        run: curl -L -o euleros.repository.json -s 'https://hub.docker.com/v2/repositories/library/euleros'
      - name: Fetch data about the tag
        run: curl -L -o euleros.tag.json -s 'https://hub.docker.com/v2/repositories/library/euleros/tags/latest'
      - name: Pull image
        run: docker pull euleros:latest
      - name: Create report
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'euleros:latest'
          format: 'json'
          output: 'euleros.report.json'
          scanners: 'vuln,secret,config'
      - name: Upload scan report
        uses: actions/upload-artifact@v4
        with:
          name: 'euleros.report.json'
          path: 'euleros.report.json'
          retention-days: 1
      - name: Upload repository data
        uses: actions/upload-artifact@v4
        with:
          name: 'euleros.repository.json'
          path: 'euleros.repository.json'
          retention-days: 1
      - name: Upload tag data
        uses: actions/upload-artifact@v4
        with:
          name: 'euleros'
          path: 'euleros'
          retention-days: 1

  sl:
    runs-on: ubuntu-latest
    steps:
      - name: Fetch data about the repository
        run: curl -L -o sl.repository.json -s 'https://hub.docker.com/v2/repositories/library/sl'
      - name: Fetch data about the tag
        run: curl -L -o sl.tag.json -s 'https://hub.docker.com/v2/repositories/library/sl/tags/latest'
      - name: Pull image
        run: docker pull sl:latest
      - name: Create report
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'sl:latest'
          format: 'json'
          output: 'sl.report.json'
          scanners: 'vuln,secret,config'
      - name: Upload scan report
        uses: actions/upload-artifact@v4
        with:
          name: 'sl.report.json'
          path: 'sl.report.json'
          retention-days: 1
      - name: Upload repository data
        uses: actions/upload-artifact@v4
        with:
          name: 'sl.repository.json'
          path: 'sl.repository.json'
          retention-days: 1
      - name: Upload tag data
        uses: actions/upload-artifact@v4
        with:
          name: 'sl'
          path: 'sl'
          retention-days: 1

  open-liberty:
    runs-on: ubuntu-latest
    steps:
      - name: Fetch data about the repository
        run: curl -L -o open-liberty.repository.json -s 'https://hub.docker.com/v2/repositories/library/open-liberty'
      - name: Fetch data about the tag
        run: curl -L -o open-liberty.tag.json -s 'https://hub.docker.com/v2/repositories/library/open-liberty/tags/latest'
      - name: Pull image
        run: docker pull open-liberty:latest
      - name: Create report
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'open-liberty:latest'
          format: 'json'
          output: 'open-liberty.report.json'
          scanners: 'vuln,secret,config'
      - name: Upload scan report
        uses: actions/upload-artifact@v4
        with:
          name: 'open-liberty.report.json'
          path: 'open-liberty.report.json'
          retention-days: 1
      - name: Upload repository data
        uses: actions/upload-artifact@v4
        with:
          name: 'open-liberty.repository.json'
          path: 'open-liberty.repository.json'
          retention-days: 1
      - name: Upload tag data
        uses: actions/upload-artifact@v4
        with:
          name: 'open-liberty'
          path: 'open-liberty'
          retention-days: 1

  teamspeak:
    runs-on: ubuntu-latest
    steps:
      - name: Fetch data about the repository
        run: curl -L -o teamspeak.repository.json -s 'https://hub.docker.com/v2/repositories/library/teamspeak'
      - name: Fetch data about the tag
        run: curl -L -o teamspeak.tag.json -s 'https://hub.docker.com/v2/repositories/library/teamspeak/tags/latest'
      - name: Pull image
        run: docker pull teamspeak:latest
      - name: Create report
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'teamspeak:latest'
          format: 'json'
          output: 'teamspeak.report.json'
          scanners: 'vuln,secret,config'
      - name: Upload scan report
        uses: actions/upload-artifact@v4
        with:
          name: 'teamspeak.report.json'
          path: 'teamspeak.report.json'
          retention-days: 1
      - name: Upload repository data
        uses: actions/upload-artifact@v4
        with:
          name: 'teamspeak.repository.json'
          path: 'teamspeak.repository.json'
          retention-days: 1
      - name: Upload tag data
        uses: actions/upload-artifact@v4
        with:
          name: 'teamspeak'
          path: 'teamspeak'
          retention-days: 1

  matomo:
    runs-on: ubuntu-latest
    steps:
      - name: Fetch data about the repository
        run: curl -L -o matomo.repository.json -s 'https://hub.docker.com/v2/repositories/library/matomo'
      - name: Fetch data about the tag
        run: curl -L -o matomo.tag.json -s 'https://hub.docker.com/v2/repositories/library/matomo/tags/latest'
      - name: Pull image
        run: docker pull matomo:latest
      - name: Create report
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'matomo:latest'
          format: 'json'
          output: 'matomo.report.json'
          scanners: 'vuln,secret,config'
      - name: Upload scan report
        uses: actions/upload-artifact@v4
        with:
          name: 'matomo.report.json'
          path: 'matomo.report.json'
          retention-days: 1
      - name: Upload repository data
        uses: actions/upload-artifact@v4
        with:
          name: 'matomo.repository.json'
          path: 'matomo.repository.json'
          retention-days: 1
      - name: Upload tag data
        uses: actions/upload-artifact@v4
        with:
          name: 'matomo'
          path: 'matomo'
          retention-days: 1

  yourls:
    runs-on: ubuntu-latest
    steps:
      - name: Fetch data about the repository
        run: curl -L -o yourls.repository.json -s 'https://hub.docker.com/v2/repositories/library/yourls'
      - name: Fetch data about the tag
        run: curl -L -o yourls.tag.json -s 'https://hub.docker.com/v2/repositories/library/yourls/tags/latest'
      - name: Pull image
        run: docker pull yourls:latest
      - name: Create report
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'yourls:latest'
          format: 'json'
          output: 'yourls.report.json'
          scanners: 'vuln,secret,config'
      - name: Upload scan report
        uses: actions/upload-artifact@v4
        with:
          name: 'yourls.report.json'
          path: 'yourls.report.json'
          retention-days: 1
      - name: Upload repository data
        uses: actions/upload-artifact@v4
        with:
          name: 'yourls.repository.json'
          path: 'yourls.repository.json'
          retention-days: 1
      - name: Upload tag data
        uses: actions/upload-artifact@v4
        with:
          name: 'yourls'
          path: 'yourls'
          retention-days: 1

  alt:
    runs-on: ubuntu-latest
    steps:
      - name: Fetch data about the repository
        run: curl -L -o alt.repository.json -s 'https://hub.docker.com/v2/repositories/library/alt'
      - name: Fetch data about the tag
        run: curl -L -o alt.tag.json -s 'https://hub.docker.com/v2/repositories/library/alt/tags/latest'
      - name: Pull image
        run: docker pull alt:latest
      - name: Create report
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'alt:latest'
          format: 'json'
          output: 'alt.report.json'
          scanners: 'vuln,secret,config'
      - name: Upload scan report
        uses: actions/upload-artifact@v4
        with:
          name: 'alt.report.json'
          path: 'alt.report.json'
          retention-days: 1
      - name: Upload repository data
        uses: actions/upload-artifact@v4
        with:
          name: 'alt.repository.json'
          path: 'alt.repository.json'
          retention-days: 1
      - name: Upload tag data
        uses: actions/upload-artifact@v4
        with:
          name: 'alt'
          path: 'alt'
          retention-days: 1

  amazoncorretto:
    runs-on: ubuntu-latest
    steps:
      - name: Fetch data about the repository
        run: curl -L -o amazoncorretto.repository.json -s 'https://hub.docker.com/v2/repositories/library/amazoncorretto'
      - name: Fetch data about the tag
        run: curl -L -o amazoncorretto.tag.json -s 'https://hub.docker.com/v2/repositories/library/amazoncorretto/tags/latest'
      - name: Pull image
        run: docker pull amazoncorretto:latest
      - name: Create report
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'amazoncorretto:latest'
          format: 'json'
          output: 'amazoncorretto.report.json'
          scanners: 'vuln,secret,config'
      - name: Upload scan report
        uses: actions/upload-artifact@v4
        with:
          name: 'amazoncorretto.report.json'
          path: 'amazoncorretto.report.json'
          retention-days: 1
      - name: Upload repository data
        uses: actions/upload-artifact@v4
        with:
          name: 'amazoncorretto.repository.json'
          path: 'amazoncorretto.repository.json'
          retention-days: 1
      - name: Upload tag data
        uses: actions/upload-artifact@v4
        with:
          name: 'amazoncorretto'
          path: 'amazoncorretto'
          retention-days: 1

  express-gateway:
    runs-on: ubuntu-latest
    steps:
      - name: Fetch data about the repository
        run: curl -L -o express-gateway.repository.json -s 'https://hub.docker.com/v2/repositories/library/express-gateway'
      - name: Fetch data about the tag
        run: curl -L -o express-gateway.tag.json -s 'https://hub.docker.com/v2/repositories/library/express-gateway/tags/latest'
      - name: Pull image
        run: docker pull express-gateway:latest
      - name: Create report
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'express-gateway:latest'
          format: 'json'
          output: 'express-gateway.report.json'
          scanners: 'vuln,secret,config'
      - name: Upload scan report
        uses: actions/upload-artifact@v4
        with:
          name: 'express-gateway.report.json'
          path: 'express-gateway.report.json'
          retention-days: 1
      - name: Upload repository data
        uses: actions/upload-artifact@v4
        with:
          name: 'express-gateway.repository.json'
          path: 'express-gateway.repository.json'
          retention-days: 1
      - name: Upload tag data
        uses: actions/upload-artifact@v4
        with:
          name: 'express-gateway'
          path: 'express-gateway'
          retention-days: 1

  postfixadmin:
    runs-on: ubuntu-latest
    steps:
      - name: Fetch data about the repository
        run: curl -L -o postfixadmin.repository.json -s 'https://hub.docker.com/v2/repositories/library/postfixadmin'
      - name: Fetch data about the tag
        run: curl -L -o postfixadmin.tag.json -s 'https://hub.docker.com/v2/repositories/library/postfixadmin/tags/latest'
      - name: Pull image
        run: docker pull postfixadmin:latest
      - name: Create report
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'postfixadmin:latest'
          format: 'json'
          output: 'postfixadmin.report.json'
          scanners: 'vuln,secret,config'
      - name: Upload scan report
        uses: actions/upload-artifact@v4
        with:
          name: 'postfixadmin.report.json'
          path: 'postfixadmin.report.json'
          retention-days: 1
      - name: Upload repository data
        uses: actions/upload-artifact@v4
        with:
          name: 'postfixadmin.repository.json'
          path: 'postfixadmin.repository.json'
          retention-days: 1
      - name: Upload tag data
        uses: actions/upload-artifact@v4
        with:
          name: 'postfixadmin'
          path: 'postfixadmin'
          retention-days: 1

  fluentd:
    runs-on: ubuntu-latest
    steps:
      - name: Fetch data about the repository
        run: curl -L -o fluentd.repository.json -s 'https://hub.docker.com/v2/repositories/library/fluentd'
      - name: Fetch data about the tag
        run: curl -L -o fluentd.tag.json -s 'https://hub.docker.com/v2/repositories/library/fluentd/tags/latest'
      - name: Pull image
        run: docker pull fluentd:latest
      - name: Create report
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'fluentd:latest'
          format: 'json'
          output: 'fluentd.report.json'
          scanners: 'vuln,secret,config'
      - name: Upload scan report
        uses: actions/upload-artifact@v4
        with:
          name: 'fluentd.report.json'
          path: 'fluentd.report.json'
          retention-days: 1
      - name: Upload repository data
        uses: actions/upload-artifact@v4
        with:
          name: 'fluentd.repository.json'
          path: 'fluentd.repository.json'
          retention-days: 1
      - name: Upload tag data
        uses: actions/upload-artifact@v4
        with:
          name: 'fluentd'
          path: 'fluentd'
          retention-days: 1

  adoptopenjdk:
    runs-on: ubuntu-latest
    steps:
      - name: Fetch data about the repository
        run: curl -L -o adoptopenjdk.repository.json -s 'https://hub.docker.com/v2/repositories/library/adoptopenjdk'
      - name: Fetch data about the tag
        run: curl -L -o adoptopenjdk.tag.json -s 'https://hub.docker.com/v2/repositories/library/adoptopenjdk/tags/latest'
      - name: Pull image
        run: docker pull adoptopenjdk:latest
      - name: Create report
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'adoptopenjdk:latest'
          format: 'json'
          output: 'adoptopenjdk.report.json'
          scanners: 'vuln,secret,config'
      - name: Upload scan report
        uses: actions/upload-artifact@v4
        with:
          name: 'adoptopenjdk.report.json'
          path: 'adoptopenjdk.report.json'
          retention-days: 1
      - name: Upload repository data
        uses: actions/upload-artifact@v4
        with:
          name: 'adoptopenjdk.repository.json'
          path: 'adoptopenjdk.repository.json'
          retention-days: 1
      - name: Upload tag data
        uses: actions/upload-artifact@v4
        with:
          name: 'adoptopenjdk'
          path: 'adoptopenjdk'
          retention-days: 1

  sapmachine:
    runs-on: ubuntu-latest
    steps:
      - name: Fetch data about the repository
        run: curl -L -o sapmachine.repository.json -s 'https://hub.docker.com/v2/repositories/library/sapmachine'
      - name: Fetch data about the tag
        run: curl -L -o sapmachine.tag.json -s 'https://hub.docker.com/v2/repositories/library/sapmachine/tags/latest'
      - name: Pull image
        run: docker pull sapmachine:latest
      - name: Create report
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'sapmachine:latest'
          format: 'json'
          output: 'sapmachine.report.json'
          scanners: 'vuln,secret,config'
      - name: Upload scan report
        uses: actions/upload-artifact@v4
        with:
          name: 'sapmachine.report.json'
          path: 'sapmachine.report.json'
          retention-days: 1
      - name: Upload repository data
        uses: actions/upload-artifact@v4
        with:
          name: 'sapmachine.repository.json'
          path: 'sapmachine.repository.json'
          retention-days: 1
      - name: Upload tag data
        uses: actions/upload-artifact@v4
        with:
          name: 'sapmachine'
          path: 'sapmachine'
          retention-days: 1

  varnish:
    runs-on: ubuntu-latest
    steps:
      - name: Fetch data about the repository
        run: curl -L -o varnish.repository.json -s 'https://hub.docker.com/v2/repositories/library/varnish'
      - name: Fetch data about the tag
        run: curl -L -o varnish.tag.json -s 'https://hub.docker.com/v2/repositories/library/varnish/tags/latest'
      - name: Pull image
        run: docker pull varnish:latest
      - name: Create report
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'varnish:latest'
          format: 'json'
          output: 'varnish.report.json'
          scanners: 'vuln,secret,config'
      - name: Upload scan report
        uses: actions/upload-artifact@v4
        with:
          name: 'varnish.report.json'
          path: 'varnish.report.json'
          retention-days: 1
      - name: Upload repository data
        uses: actions/upload-artifact@v4
        with:
          name: 'varnish.repository.json'
          path: 'varnish.repository.json'
          retention-days: 1
      - name: Upload tag data
        uses: actions/upload-artifact@v4
        with:
          name: 'varnish'
          path: 'varnish'
          retention-days: 1

  jobber:
    runs-on: ubuntu-latest
    steps:
      - name: Fetch data about the repository
        run: curl -L -o jobber.repository.json -s 'https://hub.docker.com/v2/repositories/library/jobber'
      - name: Fetch data about the tag
        run: curl -L -o jobber.tag.json -s 'https://hub.docker.com/v2/repositories/library/jobber/tags/latest'
      - name: Pull image
        run: docker pull jobber:latest
      - name: Create report
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'jobber:latest'
          format: 'json'
          output: 'jobber.report.json'
          scanners: 'vuln,secret,config'
      - name: Upload scan report
        uses: actions/upload-artifact@v4
        with:
          name: 'jobber.report.json'
          path: 'jobber.report.json'
          retention-days: 1
      - name: Upload repository data
        uses: actions/upload-artifact@v4
        with:
          name: 'jobber.repository.json'
          path: 'jobber.repository.json'
          retention-days: 1
      - name: Upload tag data
        uses: actions/upload-artifact@v4
        with:
          name: 'jobber'
          path: 'jobber'
          retention-days: 1

  archlinux:
    runs-on: ubuntu-latest
    steps:
      - name: Fetch data about the repository
        run: curl -L -o archlinux.repository.json -s 'https://hub.docker.com/v2/repositories/library/archlinux'
      - name: Fetch data about the tag
        run: curl -L -o archlinux.tag.json -s 'https://hub.docker.com/v2/repositories/library/archlinux/tags/latest'
      - name: Pull image
        run: docker pull archlinux:latest
      - name: Create report
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'archlinux:latest'
          format: 'json'
          output: 'archlinux.report.json'
          scanners: 'vuln,secret,config'
      - name: Upload scan report
        uses: actions/upload-artifact@v4
        with:
          name: 'archlinux.report.json'
          path: 'archlinux.report.json'
          retention-days: 1
      - name: Upload repository data
        uses: actions/upload-artifact@v4
        with:
          name: 'archlinux.repository.json'
          path: 'archlinux.repository.json'
          retention-days: 1
      - name: Upload tag data
        uses: actions/upload-artifact@v4
        with:
          name: 'archlinux'
          path: 'archlinux'
          retention-days: 1

  friendica:
    runs-on: ubuntu-latest
    steps:
      - name: Fetch data about the repository
        run: curl -L -o friendica.repository.json -s 'https://hub.docker.com/v2/repositories/library/friendica'
      - name: Fetch data about the tag
        run: curl -L -o friendica.tag.json -s 'https://hub.docker.com/v2/repositories/library/friendica/tags/latest'
      - name: Pull image
        run: docker pull friendica:latest
      - name: Create report
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'friendica:latest'
          format: 'json'
          output: 'friendica.report.json'
          scanners: 'vuln,secret,config'
      - name: Upload scan report
        uses: actions/upload-artifact@v4
        with:
          name: 'friendica.report.json'
          path: 'friendica.report.json'
          retention-days: 1
      - name: Upload repository data
        uses: actions/upload-artifact@v4
        with:
          name: 'friendica.repository.json'
          path: 'friendica.repository.json'
          retention-days: 1
      - name: Upload tag data
        uses: actions/upload-artifact@v4
        with:
          name: 'friendica'
          path: 'friendica'
          retention-days: 1

  caddy:
    runs-on: ubuntu-latest
    steps:
      - name: Fetch data about the repository
        run: curl -L -o caddy.repository.json -s 'https://hub.docker.com/v2/repositories/library/caddy'
      - name: Fetch data about the tag
        run: curl -L -o caddy.tag.json -s 'https://hub.docker.com/v2/repositories/library/caddy/tags/latest'
      - name: Pull image
        run: docker pull caddy:latest
      - name: Create report
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'caddy:latest'
          format: 'json'
          output: 'caddy.report.json'
          scanners: 'vuln,secret,config'
      - name: Upload scan report
        uses: actions/upload-artifact@v4
        with:
          name: 'caddy.report.json'
          path: 'caddy.report.json'
          retention-days: 1
      - name: Upload repository data
        uses: actions/upload-artifact@v4
        with:
          name: 'caddy.repository.json'
          path: 'caddy.repository.json'
          retention-days: 1
      - name: Upload tag data
        uses: actions/upload-artifact@v4
        with:
          name: 'caddy'
          path: 'caddy'
          retention-days: 1

  monica:
    runs-on: ubuntu-latest
    steps:
      - name: Fetch data about the repository
        run: curl -L -o monica.repository.json -s 'https://hub.docker.com/v2/repositories/library/monica'
      - name: Fetch data about the tag
        run: curl -L -o monica.tag.json -s 'https://hub.docker.com/v2/repositories/library/monica/tags/latest'
      - name: Pull image
        run: docker pull monica:latest
      - name: Create report
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'monica:latest'
          format: 'json'
          output: 'monica.report.json'
          scanners: 'vuln,secret,config'
      - name: Upload scan report
        uses: actions/upload-artifact@v4
        with:
          name: 'monica.report.json'
          path: 'monica.report.json'
          retention-days: 1
      - name: Upload repository data
        uses: actions/upload-artifact@v4
        with:
          name: 'monica.repository.json'
          path: 'monica.repository.json'
          retention-days: 1
      - name: Upload tag data
        uses: actions/upload-artifact@v4
        with:
          name: 'monica'
          path: 'monica'
          retention-days: 1

  phpmyadmin:
    runs-on: ubuntu-latest
    steps:
      - name: Fetch data about the repository
        run: curl -L -o phpmyadmin.repository.json -s 'https://hub.docker.com/v2/repositories/library/phpmyadmin'
      - name: Fetch data about the tag
        run: curl -L -o phpmyadmin.tag.json -s 'https://hub.docker.com/v2/repositories/library/phpmyadmin/tags/latest'
      - name: Pull image
        run: docker pull phpmyadmin:latest
      - name: Create report
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'phpmyadmin:latest'
          format: 'json'
          output: 'phpmyadmin.report.json'
          scanners: 'vuln,secret,config'
      - name: Upload scan report
        uses: actions/upload-artifact@v4
        with:
          name: 'phpmyadmin.report.json'
          path: 'phpmyadmin.report.json'
          retention-days: 1
      - name: Upload repository data
        uses: actions/upload-artifact@v4
        with:
          name: 'phpmyadmin.repository.json'
          path: 'phpmyadmin.repository.json'
          retention-days: 1
      - name: Upload tag data
        uses: actions/upload-artifact@v4
        with:
          name: 'phpmyadmin'
          path: 'phpmyadmin'
          retention-days: 1

  hitch:
    runs-on: ubuntu-latest
    steps:
      - name: Fetch data about the repository
        run: curl -L -o hitch.repository.json -s 'https://hub.docker.com/v2/repositories/library/hitch'
      - name: Fetch data about the tag
        run: curl -L -o hitch.tag.json -s 'https://hub.docker.com/v2/repositories/library/hitch/tags/latest'
      - name: Pull image
        run: docker pull hitch:latest
      - name: Create report
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'hitch:latest'
          format: 'json'
          output: 'hitch.report.json'
          scanners: 'vuln,secret,config'
      - name: Upload scan report
        uses: actions/upload-artifact@v4
        with:
          name: 'hitch.report.json'
          path: 'hitch.report.json'
          retention-days: 1
      - name: Upload repository data
        uses: actions/upload-artifact@v4
        with:
          name: 'hitch.repository.json'
          path: 'hitch.repository.json'
          retention-days: 1
      - name: Upload tag data
        uses: actions/upload-artifact@v4
        with:
          name: 'hitch'
          path: 'hitch'
          retention-days: 1

  almalinux:
    runs-on: ubuntu-latest
    steps:
      - name: Fetch data about the repository
        run: curl -L -o almalinux.repository.json -s 'https://hub.docker.com/v2/repositories/library/almalinux'
      - name: Fetch data about the tag
        run: curl -L -o almalinux.tag.json -s 'https://hub.docker.com/v2/repositories/library/almalinux/tags/latest'
      - name: Pull image
        run: docker pull almalinux:latest
      - name: Create report
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'almalinux:latest'
          format: 'json'
          output: 'almalinux.report.json'
          scanners: 'vuln,secret,config'
      - name: Upload scan report
        uses: actions/upload-artifact@v4
        with:
          name: 'almalinux.report.json'
          path: 'almalinux.report.json'
          retention-days: 1
      - name: Upload repository data
        uses: actions/upload-artifact@v4
        with:
          name: 'almalinux.repository.json'
          path: 'almalinux.repository.json'
          retention-days: 1
      - name: Upload tag data
        uses: actions/upload-artifact@v4
        with:
          name: 'almalinux'
          path: 'almalinux'
          retention-days: 1

  dart:
    runs-on: ubuntu-latest
    steps:
      - name: Fetch data about the repository
        run: curl -L -o dart.repository.json -s 'https://hub.docker.com/v2/repositories/library/dart'
      - name: Fetch data about the tag
        run: curl -L -o dart.tag.json -s 'https://hub.docker.com/v2/repositories/library/dart/tags/latest'
      - name: Pull image
        run: docker pull dart:latest
      - name: Create report
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'dart:latest'
          format: 'json'
          output: 'dart.report.json'
          scanners: 'vuln,secret,config'
      - name: Upload scan report
        uses: actions/upload-artifact@v4
        with:
          name: 'dart.report.json'
          path: 'dart.report.json'
          retention-days: 1
      - name: Upload repository data
        uses: actions/upload-artifact@v4
        with:
          name: 'dart.repository.json'
          path: 'dart.repository.json'
          retention-days: 1
      - name: Upload tag data
        uses: actions/upload-artifact@v4
        with:
          name: 'dart'
          path: 'dart'
          retention-days: 1

  eclipse-temurin:
    runs-on: ubuntu-latest
    steps:
      - name: Fetch data about the repository
        run: curl -L -o eclipse-temurin.repository.json -s 'https://hub.docker.com/v2/repositories/library/eclipse-temurin'
      - name: Fetch data about the tag
        run: curl -L -o eclipse-temurin.tag.json -s 'https://hub.docker.com/v2/repositories/library/eclipse-temurin/tags/latest'
      - name: Pull image
        run: docker pull eclipse-temurin:latest
      - name: Create report
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'eclipse-temurin:latest'
          format: 'json'
          output: 'eclipse-temurin.report.json'
          scanners: 'vuln,secret,config'
      - name: Upload scan report
        uses: actions/upload-artifact@v4
        with:
          name: 'eclipse-temurin.report.json'
          path: 'eclipse-temurin.report.json'
          retention-days: 1
      - name: Upload repository data
        uses: actions/upload-artifact@v4
        with:
          name: 'eclipse-temurin.repository.json'
          path: 'eclipse-temurin.repository.json'
          retention-days: 1
      - name: Upload tag data
        uses: actions/upload-artifact@v4
        with:
          name: 'eclipse-temurin'
          path: 'eclipse-temurin'
          retention-days: 1

  ibm-semeru-runtimes:
    runs-on: ubuntu-latest
    steps:
      - name: Fetch data about the repository
        run: curl -L -o ibm-semeru-runtimes.repository.json -s 'https://hub.docker.com/v2/repositories/library/ibm-semeru-runtimes'
      - name: Fetch data about the tag
        run: curl -L -o ibm-semeru-runtimes.tag.json -s 'https://hub.docker.com/v2/repositories/library/ibm-semeru-runtimes/tags/open-8u412-b08-jre-jammy'
      - name: Pull image
        run: docker pull ibm-semeru-runtimes:open-8u412-b08-jre-jammy
      - name: Create report
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'ibm-semeru-runtimes:open-8u412-b08-jre-jammy'
          format: 'json'
          output: 'ibm-semeru-runtimes.report.json'
          scanners: 'vuln,secret,config'
      - name: Upload scan report
        uses: actions/upload-artifact@v4
        with:
          name: 'ibm-semeru-runtimes.report.json'
          path: 'ibm-semeru-runtimes.report.json'
          retention-days: 1
      - name: Upload repository data
        uses: actions/upload-artifact@v4
        with:
          name: 'ibm-semeru-runtimes.repository.json'
          path: 'ibm-semeru-runtimes.repository.json'
          retention-days: 1
      - name: Upload tag data
        uses: actions/upload-artifact@v4
        with:
          name: 'ibm-semeru-runtimes'
          path: 'ibm-semeru-runtimes'
          retention-days: 1

  rockylinux:
    runs-on: ubuntu-latest
    steps:
      - name: Fetch data about the repository
        run: curl -L -o rockylinux.repository.json -s 'https://hub.docker.com/v2/repositories/library/rockylinux'
      - name: Fetch data about the tag
        run: curl -L -o rockylinux.tag.json -s 'https://hub.docker.com/v2/repositories/library/rockylinux/tags/9.3.20231119-minimal'
      - name: Pull image
        run: docker pull rockylinux:9.3.20231119-minimal
      - name: Create report
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'rockylinux:9.3.20231119-minimal'
          format: 'json'
          output: 'rockylinux.report.json'
          scanners: 'vuln,secret,config'
      - name: Upload scan report
        uses: actions/upload-artifact@v4
        with:
          name: 'rockylinux.report.json'
          path: 'rockylinux.report.json'
          retention-days: 1
      - name: Upload repository data
        uses: actions/upload-artifact@v4
        with:
          name: 'rockylinux.repository.json'
          path: 'rockylinux.repository.json'
          retention-days: 1
      - name: Upload tag data
        uses: actions/upload-artifact@v4
        with:
          name: 'rockylinux'
          path: 'rockylinux'
          retention-days: 1

  api-firewall:
    runs-on: ubuntu-latest
    steps:
      - name: Fetch data about the repository
        run: curl -L -o api-firewall.repository.json -s 'https://hub.docker.com/v2/repositories/library/api-firewall'
      - name: Fetch data about the tag
        run: curl -L -o api-firewall.tag.json -s 'https://hub.docker.com/v2/repositories/library/api-firewall/tags/latest'
      - name: Pull image
        run: docker pull api-firewall:latest
      - name: Create report
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'api-firewall:latest'
          format: 'json'
          output: 'api-firewall.report.json'
          scanners: 'vuln,secret,config'
      - name: Upload scan report
        uses: actions/upload-artifact@v4
        with:
          name: 'api-firewall.report.json'
          path: 'api-firewall.report.json'
          retention-days: 1
      - name: Upload repository data
        uses: actions/upload-artifact@v4
        with:
          name: 'api-firewall.repository.json'
          path: 'api-firewall.repository.json'
          retention-days: 1
      - name: Upload tag data
        uses: actions/upload-artifact@v4
        with:
          name: 'api-firewall'
          path: 'api-firewall'
          retention-days: 1

  emqx:
    runs-on: ubuntu-latest
    steps:
      - name: Fetch data about the repository
        run: curl -L -o emqx.repository.json -s 'https://hub.docker.com/v2/repositories/library/emqx'
      - name: Fetch data about the tag
        run: curl -L -o emqx.tag.json -s 'https://hub.docker.com/v2/repositories/library/emqx/tags/latest'
      - name: Pull image
        run: docker pull emqx:latest
      - name: Create report
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'emqx:latest'
          format: 'json'
          output: 'emqx.report.json'
          scanners: 'vuln,secret,config'
      - name: Upload scan report
        uses: actions/upload-artifact@v4
        with:
          name: 'emqx.report.json'
          path: 'emqx.report.json'
          retention-days: 1
      - name: Upload repository data
        uses: actions/upload-artifact@v4
        with:
          name: 'emqx.repository.json'
          path: 'emqx.repository.json'
          retention-days: 1
      - name: Upload tag data
        uses: actions/upload-artifact@v4
        with:
          name: 'emqx'
          path: 'emqx'
          retention-days: 1

  satosa:
    runs-on: ubuntu-latest
    steps:
      - name: Fetch data about the repository
        run: curl -L -o satosa.repository.json -s 'https://hub.docker.com/v2/repositories/library/satosa'
      - name: Fetch data about the tag
        run: curl -L -o satosa.tag.json -s 'https://hub.docker.com/v2/repositories/library/satosa/tags/latest'
      - name: Pull image
        run: docker pull satosa:latest
      - name: Create report
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'satosa:latest'
          format: 'json'
          output: 'satosa.report.json'
          scanners: 'vuln,secret,config'
      - name: Upload scan report
        uses: actions/upload-artifact@v4
        with:
          name: 'satosa.report.json'
          path: 'satosa.report.json'
          retention-days: 1
      - name: Upload repository data
        uses: actions/upload-artifact@v4
        with:
          name: 'satosa.repository.json'
          path: 'satosa.repository.json'
          retention-days: 1
      - name: Upload tag data
        uses: actions/upload-artifact@v4
        with:
          name: 'satosa'
          path: 'satosa'
          retention-days: 1

  unit:
    runs-on: ubuntu-latest
    steps:
      - name: Fetch data about the repository
        run: curl -L -o unit.repository.json -s 'https://hub.docker.com/v2/repositories/library/unit'
      - name: Fetch data about the tag
        run: curl -L -o unit.tag.json -s 'https://hub.docker.com/v2/repositories/library/unit/tags/latest'
      - name: Pull image
        run: docker pull unit:latest
      - name: Create report
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'unit:latest'
          format: 'json'
          output: 'unit.report.json'
          scanners: 'vuln,secret,config'
      - name: Upload scan report
        uses: actions/upload-artifact@v4
        with:
          name: 'unit.report.json'
          path: 'unit.report.json'
          retention-days: 1
      - name: Upload repository data
        uses: actions/upload-artifact@v4
        with:
          name: 'unit.repository.json'
          path: 'unit.repository.json'
          retention-days: 1
      - name: Upload tag data
        uses: actions/upload-artifact@v4
        with:
          name: 'unit'
          path: 'unit'
          retention-days: 1

  spark:
    runs-on: ubuntu-latest
    steps:
      - name: Fetch data about the repository
        run: curl -L -o spark.repository.json -s 'https://hub.docker.com/v2/repositories/library/spark'
      - name: Fetch data about the tag
        run: curl -L -o spark.tag.json -s 'https://hub.docker.com/v2/repositories/library/spark/tags/latest'
      - name: Pull image
        run: docker pull spark:latest
      - name: Create report
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'spark:latest'
          format: 'json'
          output: 'spark.report.json'
          scanners: 'vuln,secret,config'
      - name: Upload scan report
        uses: actions/upload-artifact@v4
        with:
          name: 'spark.report.json'
          path: 'spark.report.json'
          retention-days: 1
      - name: Upload repository data
        uses: actions/upload-artifact@v4
        with:
          name: 'spark.repository.json'
          path: 'spark.repository.json'
          retention-days: 1
      - name: Upload tag data
        uses: actions/upload-artifact@v4
        with:
          name: 'spark'
          path: 'spark'
          retention-days: 1

  liquibase:
    runs-on: ubuntu-latest
    steps:
      - name: Fetch data about the repository
        run: curl -L -o liquibase.repository.json -s 'https://hub.docker.com/v2/repositories/library/liquibase'
      - name: Fetch data about the tag
        run: curl -L -o liquibase.tag.json -s 'https://hub.docker.com/v2/repositories/library/liquibase/tags/latest'
      - name: Pull image
        run: docker pull liquibase:latest
      - name: Create report
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'liquibase:latest'
          format: 'json'
          output: 'liquibase.report.json'
          scanners: 'vuln,secret,config'
      - name: Upload scan report
        uses: actions/upload-artifact@v4
        with:
          name: 'liquibase.report.json'
          path: 'liquibase.report.json'
          retention-days: 1
      - name: Upload repository data
        uses: actions/upload-artifact@v4
        with:
          name: 'liquibase.repository.json'
          path: 'liquibase.repository.json'
          retention-days: 1
      - name: Upload tag data
        uses: actions/upload-artifact@v4
        with:
          name: 'liquibase'
          path: 'liquibase'
          retention-days: 1

  collect:
    runs-on: ubuntu-latest
    needs: [centos, busybox, ubuntu, fedora, registry, hipache, docker-dev, debian, cirros, crux, ubuntu-upstart, buildpack-deps, nginx, node, mysql, wordpress, postgres, redis, mongo, rails, ruby, python, ubuntu-debootstrap, perl, hello-world, hylang, gcc, jenkins, golang, neurodebian, clojure, php, jruby, mageia, crate, php-zendserver, tomcat, mono, haskell, glassfish, maven, httpd, sentry, r-base, mariadb, thrift, pypy, django, haproxy, memcached, rabbitmq, oraclelinux, odoo, rethinkdb, iojs, websphere-liberty, irssi, swarm, elasticsearch, jetty, ghost, celery, percona, aerospike, logstash, julia, alpine, rakudo-star, drupal, cassandra, sonarqube, couchbase, ros, kibana, kaazing-gateway, arangodb, owncloud, gazebo, joomla, redmine, nats, rocket_chat, docker, tomee, sourcemage, bonita, solr, neo4j, erlang, nuxeo, photon, couchdb, notary, piwik, elixir, lightstreamer, orientdb, mongo-express, traefik, backdrop, consul, chronograf, influxdb, kapacitor, telegraf, hello-seattle, hola-mundo, fsharp, spiped, vault, clearlinux, eggdrop, ibmjava, openjdk, kong, zookeeper, nats-streaming, storm, plone, bash, amazonlinux, composer, known, eclipse-mosquitto, nextcloud, silverpeas, swift, haxe, rapidoid, adminer, geonetwork, xwiki, groovy, znc, gradle, convertigo, flink, swipl, rust, mediawiki, euleros, sl, open-liberty, teamspeak, matomo, yourls, alt, amazoncorretto, express-gateway, postfixadmin, fluentd, adoptopenjdk, sapmachine, varnish, jobber, archlinux, friendica, caddy, monica, phpmyadmin, hitch, almalinux, dart, eclipse-temurin, ibm-semeru-runtimes, rockylinux, api-firewall, emqx, satosa, unit, spark, liquibase]
    steps:
      - name: Get current date
        id: date
        run: echo "::set-output name=date::$(date +'%Y-%m-%d')"
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          pattern: '*.json'
      - name: Create archive
        run: |
         mkdir files
         mv */*.json files
         rmdir *.json
         mv files/*.json .
         rmdir files
         tar cvzf reports.tar.gz *.json
      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: 'reports.tar.gz'
          path: 'reports.tar.gz'
      - name: Upload to Google Drive
        uses: willo32/google-drive-upload-action@v1
        with:
          target: reports.tar.gz
          name: reports.${{ steps.date.outputs.date }}.tar.gz
          credentials: ${{ secrets.GCP_DRIVE_SERVICE_ACCOUNT }}
          parent_folder_id: ${{ secrets.GOOGLEDRIVE_FOLDER_ID }}
